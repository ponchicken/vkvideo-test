export declare type IUnsubscriber = () => void;
export interface ISubscription {
    unsubscribe: IUnsubscriber;
    add(item: ISubscription | IUnsubscriber): ISubscription;
}
export interface IObservable<T> {
    subscribe(listener: IListener<T>, error?: IListener<Error | unknown>): ISubscription;
    pipe<T1>(op1: IOperator<T, T1>): IObservable<T1>;
    pipe<T1, T2>(op1: IOperator<T, T1>, op2: IOperator<T1, T2>): IObservable<T2>;
    pipe<T1, T2, T3>(op1: IOperator<T, T1>, op2: IOperator<T1, T2>, op3: IOperator<T2, T3>): IObservable<T3>;
    pipe<T1, T2, T3, T4>(op1: IOperator<T, T1>, op2: IOperator<T1, T2>, op3: IOperator<T2, T3>, op4: IOperator<T3, T4>): IObservable<T4>;
    pipe<T1, T2, T3, T4, T5>(op1: IOperator<T, T1>, op2: IOperator<T1, T2>, op3: IOperator<T2, T3>, op4: IOperator<T3, T4>, op5: IOperator<T4, T5>): IObservable<T5>;
}
export interface IValue<T> {
    getValue(): T;
}
export interface IEmitter<T> {
    next(value: T): void;
    error?(value: Error | unknown): void;
}
export interface IValueObservable<T> extends IObservable<T>, IValue<T> {
}
export interface ISubject<T> extends IEmitter<T>, IObservable<T> {
}
export interface IValueSubject<T> extends IEmitter<T>, IObservable<T>, IValue<T> {
}
export declare type IListener<T> = IEmitter<T> | ((value: T) => void);
export declare type IOperator<TInput, TOutput = TInput> = (input: IObservable<TInput>) => IObservable<TOutput>;
export declare type TypeOfObservable<TObservable> = TObservable extends IObservable<infer TType> ? TType : never;
