import type { IEmitter, IListener, IObservable, IOperator, ISubscription, IUnsubscriber } from './types';
export default class Observable<T> implements IObservable<T> {
    constructor(subscribe?: (emitter: IEmitter<T>) => IUnsubscriber | ISubscription | void);
    subscribe(listener: IListener<T>, error?: IListener<Error | unknown>): ISubscription;
    pipe(...operators: IOperator<unknown, unknown>[]): IObservable<unknown>;
    protected _subscribe(_emitter: IEmitter<T>): IUnsubscriber | ISubscription | void;
}
