import type { IObservable } from '../reactive/types';
export interface ILogger {
    log: (entry: ILogInputEntry) => void;
    createCustomLog: <TArgs extends unknown[]>(transform: (...args: TArgs) => ILogInputEntry) => (...args: TArgs) => void;
    createComponentLog: (component: string) => IComponentLogger;
    getAllLogs: () => ILogEntry[];
    log$: IObservable<ILogEntry>;
}
export interface ILogEntry {
    /**
     * Сообщение.
     */
    message: string;
    /**
     * Компонент, в котором залогировано событие. (модуль, класс или функция)
     */
    component: string;
    /**
     * Время, в которое случилось логируемое событие
     */
    timestamp: number;
}
export declare type IComponentLogger = (entry: IComponentLogEntry) => void;
export declare type ILogInputEntry = Omit<ILogEntry, 'timestamp'>;
export interface IComponentLogEntry extends Omit<ILogInputEntry, 'component'>, IOptionalComponent {
}
interface IOptionalComponent {
    component?: ILogInputEntry['component'];
}
export {};
