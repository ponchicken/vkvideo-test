import type { VideoQuality } from '@vkontakte/videoplayer-core';
import type { ISources, StartStatus } from '@vkontakte/videoplayer-core';
export declare const enum AdditionalVideoQuality {
    AUTO = "auto"
}
export declare type VideoQualityUI = VideoQuality | AdditionalVideoQuality;
export interface IVKVideoPlayerCallbacks {
    onFirstStartAttempt?: (startStatus: StartStatus) => void;
    onStarted?: (isMuted: boolean) => void;
    onEnded?: () => void;
    onPlay?: () => void;
    onPause?: () => void;
    onVolumeChange?: (volume: number) => void;
    onFullscreenEnter?: () => void;
    onFullscreenExit?: () => void;
    onMute?: () => void;
    onUnmute?: () => void;
    onTimeupdate?: (duration: number, position: number) => void;
    onSeek?: (from: number, to: number) => void;
}
export declare type AdsParams = Record<string, unknown>;
export interface IVideoData {
    sources: ISources;
    title: string;
    thumbUrl: string;
    unitedVideoId: number;
    duration: number;
    adsParams?: AdsParams;
}
export interface IVKVideoPlayerConfig {
    videos: IVideoData[];
    albumId?: string;
    statPlace?: string;
    autoplay?: boolean;
    repeat?: boolean;
    volume?: number;
    muted?: boolean;
    fromTime?: number;
    canRewindLive?: boolean;
    supportLink?: string;
    showAds?: boolean;
    adsSlotId?: number;
    adsParams?: AdsParams;
    adsPreviewParam?: number;
    logoClickable?: boolean;
    isMobile?: boolean;
    callbacks?: IVKVideoPlayerCallbacks;
}
export declare const enum PlayerPhase {
    Thumb = "thumb",
    Video = "video",
    Ads = "ads"
}
export declare const enum AdsSection {
    Preroll = "preroll",
    Midroll = "midroll",
    Postroll = "postroll"
}
export declare const enum AdsPlaybackState {
    INACTIVE = "inactive",
    PLAYING = "playing",
    PAUSED = "paused"
}
export declare type VideoQualityForRender = {
    value: VideoQualityUI;
    displayValue: string;
    selected: boolean;
};
export declare type VideoPlaybackRate = {
    value: number;
    displayValue: string;
    selected: boolean;
};
