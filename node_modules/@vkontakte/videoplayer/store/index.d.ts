import type { Readable, Writable } from 'svelte/store';
import type { ILogger, IValueObservable } from '@vkontakte/videoplayer-shared';
import type { IConfig, PlaybackRate } from '@vkontakte/videoplayer-core';
import { VideoFormat, ChromecastState, PlaybackState, VideoQuality } from '@vkontakte/videoplayer-core';
import type { IVKVideoPlayerCallbacks, VideoQualityUI } from '../types';
import { PlayerPhase, AdsPlaybackState } from '../types';
import type { DebugData } from './utils';
import { AdmanWrapper } from '../components/Ads/admanWrapper';
import type { VideoQualityForRender, VideoPlaybackRate } from '../types';
export interface IAdsState {
    position: Writable<number>;
    duration: Writable<number>;
    playbackState: Writable<AdsPlaybackState>;
    canSkip: Writable<boolean>;
    secondsToWatchBeforeSkip: Writable<number>;
    postrollPassed: Writable<boolean>;
}
export interface IUIState {
    controlsVisible: Writable<boolean>;
    isFullscreen: Writable<boolean>;
    isAutoplay: Writable<boolean>;
    contextMenuVisible: Writable<boolean>;
    debugPanelVisible: Writable<boolean>;
    playerSize: Writable<{
        width: number;
        height: number;
    }>;
    isMobile: Writable<boolean>;
    mobileUnmuteButtonExpanded: Writable<boolean>;
    mobileUnmuteButtonVisible: Writable<boolean>;
    settingsMenuVisible: Writable<boolean>;
    scrubbingInProgress: Writable<boolean>;
}
export interface IStore {
    initVideo: (config: IConfig) => void;
    playerPhase: Writable<PlayerPhase>;
    state: {
        positionExact$: Readable<number>;
        positionWithScrubbing$: Readable<number>;
        duration$: Readable<number>;
        playbackState$: Readable<PlaybackState>;
        isLoaderVisible: Readable<boolean>;
        bufferedProgress$: Readable<number>;
        isLive$: Readable<boolean | undefined>;
        isActiveLive$: Readable<boolean>;
        isEnded$: Readable<boolean>;
        volume$: Readable<number>;
        muted$: Readable<boolean>;
        currentQuality$: Readable<VideoQuality | undefined>;
        isAutoQualityEnabled$: Readable<boolean | undefined>;
        availableQualities$: Readable<VideoQualityForRender[]>;
        currentPlaybackRate$: Readable<number>;
        availablePlaybackRates$: Readable<VideoPlaybackRate[]>;
        chromecastState$: Readable<ChromecastState>;
        chromecastDeviceName$: Readable<string | undefined>;
        chromecastConnected$: Readable<boolean>;
        currentFormat$: IValueObservable<VideoFormat | undefined>;
    };
    ui: IUIState;
    ads: IAdsState;
    actions: {
        internal: {
            firstStart: (showAds: boolean) => void;
            pause: () => void;
            togglePlay: () => void;
            toggleMuted: () => void;
            setVolume: (volume: number, preferredVolume?: number) => void;
            setQuality: (quality: VideoQualityUI) => void;
            setPlaybackRate: (playbackRate: PlaybackRate) => void;
            startScrubbing: (progress: number) => void;
            progressScrubbing: (progress: number) => void;
            completeScrubbing: (progress: number) => void;
            toggleChromecast: () => void;
            seekTime: (time: number) => void;
            switchToActiveLive: () => void;
            switchFromAdsToVideo: (callPlay?: boolean) => void;
            switchFromVideoToAds: () => void;
            skipAd: () => void;
            getDebugTextData: () => string;
            getDebugPanelData: () => DebugData;
            getVideoElement: () => HTMLVideoElement | null;
            startLogging: () => void;
            stopLogging: () => void;
        };
        external: {
            firstStart: (showAds: boolean) => void;
            play: () => void;
            pause: () => void;
            seekTime: (time: number) => void;
            setMuted: (muted: boolean) => void;
            setVolume: (volume: number) => void;
        };
    };
    callbacks: IVKVideoPlayerCallbacks;
    getAdmanWrapper: () => AdmanWrapper;
    getLogger: () => ILogger;
    destroy(): void;
}
interface IStoreParams {
    videoId: number;
    albumId?: string;
    autoplay?: boolean;
    statPlace?: string;
    callbacks: IVKVideoPlayerCallbacks;
    uiCallbacks: {
        onStarted: (isMuted: boolean) => void;
    };
}
/**
 * Store приложения.
 * Если будет слишком большим - можно разделить его на модули
 */
export declare const createStore: ({ videoId, albumId, autoplay, statPlace, callbacks, uiCallbacks, }: IStoreParams) => IStore;
export {};
