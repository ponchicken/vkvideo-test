import type { Readable } from 'svelte/store';
import type { IValueObservable } from '@vkontakte/videoplayer-shared';
import type { IPlayer, IConfig } from '@vkontakte/videoplayer-core';
import { VideoFormat, VideoQuality, HttpConnectionType as CoreConnectionType } from '@vkontakte/videoplayer-core';
import { ContentType, Quality, ConnectionType as StatisticsConnectionType } from '@vkontakte/videoplayer-statistics';
import type { IStore } from '.';
export declare const setStore: (store: IStore) => void;
export declare const getStore: () => IStore;
export declare const coreQualityToOneStatQuality: (coreQuality: VideoQuality | undefined) => Quality | undefined;
export declare const coreConnectionTypeToOneStatConnectionType: (coreType: CoreConnectionType | undefined) => StatisticsConnectionType | undefined;
export declare const videoFormatToContentType: (format: VideoFormat | undefined) => ContentType | undefined;
/**
 * Создаёт readable store svelte'а из `IObservableValue` sdk
 */
export declare const storeFromObservable: <T>(observable$: IValueObservable<T>, onNewValueEmitted?: ((value: T) => void) | undefined) => Readable<T>;
export declare const constructDebugTextData: (player: IPlayer, config: IConfig, store: IStore) => string;
export declare type DebugData = {
    version: string;
    viewport: string;
    provider?: string;
    cdn?: string;
    volume: number;
    videoSize?: string;
    buffer?: number;
    speed?: number;
};
export declare const constructDebugPanelData: (player: IPlayer, config: IConfig, store: IStore) => DebugData;
