import type { DashMetrics, FragmentRequest, MediaPlayerEvents, MediaType, Event } from 'dashjs';
export interface IInternalFragmentRequest extends FragmentRequest {
    range?: string;
}
export interface IInternalDashMetrics extends DashMetrics {
    addHttpRequest(request: FragmentRequest, responseURL: string, responseStatus: number, responseHeaders: string, traces: unknown[]): void;
}
export interface IDashJSLoadConfig {
    abort?: (unk: unknown) => void;
    error?: (...unk: unknown[]) => void;
    progress?: (unk?: unknown) => void;
    success?: (data: any, statusText: string, url: string) => void;
    request: IInternalFragmentRequest;
}
export interface IDashJSLoader {
    load(request: IDashJSLoadConfig): void;
    abort(request?: IDashJSLoadConfig): void;
}
export interface ILoaderConfig {
    errHandler: unknown;
    mediaPlayerModel: unknown;
    requestModifier: unknown;
    useFetch: unknown;
    dashMetrics: IInternalDashMetrics;
    boxParser: unknown;
    constants: unknown;
    dashConstants: unknown;
    urlUtils: unknown;
    requestTimeout: unknown;
    errors: unknown;
}
export interface FragmentLoadingStartedEvent extends Event {
    type: MediaPlayerEvents['FRAGMENT_LOADING_STARTED'];
    request: FragmentRequest;
    mediaType: MediaType;
    streamId: string;
}
