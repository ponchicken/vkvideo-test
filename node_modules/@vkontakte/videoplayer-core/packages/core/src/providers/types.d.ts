import { QualityLimits } from "../utils/quality/types";
import { ITuningConfig } from "../utils/tuningConfig";
import { ILogger, ISubject, IValueSubject, Milliseconds, Seconds, IRange, IError } from '@vkontakte/videoplayer-shared';
import { IChromecastInitializer } from "./ChromecastProvider/ChromecastInitializer/types";
import { HttpConnectionType, ICueSettings, SeekState } from "../player/types";
import { IExternalTextTrack, ITextTrack, IVideoTrack, IVolumeState, PlaybackState, PlaybackRate } from "../player/types";
import { IStateMachine } from "../utils/StateMachine/types";
import ThroughputEstimator from "../utils/ThroughputEstimator";
export interface IProvider {
    destroy(): void;
}
export interface IProviderDependencies {
    dependencies: {
        throughputEstimator: ThroughputEstimator;
        chromecastInitializer: IChromecastInitializer;
        logger: ILogger;
    };
}
export interface IProviderParams<TSourceType> extends IProviderDependencies {
    container: HTMLElement;
    source: TSourceType;
    desiredState: IDesiredState;
    output: IProviderOutput;
    tuning: ITuningConfig;
}
export interface IDesiredState {
    playbackState: IStateMachine<PlaybackState>;
    seekState: IStateMachine<SeekState>;
    volume: IStateMachine<IVolumeState>;
    playbackRate: IStateMachine<PlaybackRate>;
    videoTrack: IStateMachine<IVideoTrack['id'] | undefined>;
    autoVideoTrackSwitching: IStateMachine<boolean>;
    autoVideoTrackLimits: IStateMachine<QualityLimits>;
    isLooped: IStateMachine<boolean>;
    externalTextTracks: IStateMachine<IExternalTextTrack[]>;
    currentTextTrack: IStateMachine<ITextTrack['id'] | undefined>;
    textTrackCuesSettings: IStateMachine<ICueSettings>;
}
export interface IProviderOutput {
    position$: IValueSubject<Seconds>;
    duration$: IValueSubject<Seconds>;
    volume$: IValueSubject<IVolumeState>;
    currentVideoTrack$: IValueSubject<IVideoTrack | undefined>;
    availableVideoTracks$: IValueSubject<IVideoTrack[]>;
    autoVideoTrackLimitingAvailable$: IValueSubject<boolean>;
    currentBuffer$: IValueSubject<IRange<Seconds> | undefined>;
    isBuffering$: IValueSubject<boolean>;
    isLive$: IValueSubject<boolean | undefined>;
    liveTime$: IValueSubject<Milliseconds | undefined>;
    availableTextTracks$: IValueSubject<ITextTrack[]>;
    currentTextTrack$: IValueSubject<ITextTrack['id'] | undefined>;
    hostname$: IValueSubject<string | undefined>;
    httpConnectionType$: IValueSubject<HttpConnectionType | undefined>;
    httpConnectionReused$: IValueSubject<boolean | undefined>;
    element$: IValueSubject<HTMLVideoElement | undefined>;
    willSeekEvent$: ISubject<void>;
    seekedEvent$: ISubject<void>;
    error$: ISubject<IError>;
    endedEvent$: ISubject<void>;
    loopedEvent$: ISubject<Seconds>;
    firstBytesEvent$: ISubject<void>;
    firstFrameEvent$: ISubject<void>;
    canplay$: ISubject<void>;
}
