import { IRepresentation } from '../types';
interface IParams {
    mediaSource: MediaSource;
    sourceBuffer: SourceBuffer;
    requestQuic: boolean;
    onBandwidthChange: (payload: {
        size: number;
        duration: number;
        speed: number;
    }) => void;
    onError: (id: string, message: string, thrown?: Error | unknown) => void;
    onDashCallback: (eventName: string, param?: any) => any;
}
export default class DashStream {
    private _appendPromiseUint8Array?;
    private _lastXhr?;
    private _lastStreamUpdatingCallback?;
    private _maxBufferDuration;
    private _isFull;
    private _mediaSource;
    private _sourceBuffer;
    private _onDashCallback;
    private _params;
    constructor(params: IParams);
    _appendBuffer(buffer: BufferSource, successCallback?: () => void): void;
    getMaxBufferDuration(): number;
    isFull(): boolean;
    load(representation: IRepresentation, from: number, to: number, muxCb: (data: Uint8Array, cb?: () => void) => void, completeCb: (() => void) | undefined, pingCb: ((headers: Headers) => void) | undefined, flushVolume: number): void;
    abort(next?: () => void): void;
    _sbUpdatingWatch(cb: () => void): (() => void) | undefined;
    _sbUpdatingStop(callback?: () => void): void;
    append(data: Uint8Array, cb?: () => void): void;
    endOfStream(): void;
    static _concatUint8(one: Uint8Array, two: Uint8Array): Uint8Array;
    static _str2ua(s: string): Uint8Array;
    remove(a: number, b: number): void;
    destroy(): void;
}
export {};
