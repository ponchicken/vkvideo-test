import { ITuningConfig } from "../../../utils/tuningConfig";
import { IError, IRange, ISubject, IValueSubject, Milliseconds } from '@vkontakte/videoplayer-shared';
import type { Fetcher } from './fetcher';
import { Container, Representation, RepresentationKind } from './types';
export interface Dependencies {
    fetcher: Fetcher;
    tuning: ITuningConfig;
    getCurrentPosition: () => Milliseconds | undefined;
}
export interface Gap extends IRange<Milliseconds> {
    representation: Representation['id'];
}
export declare class BufferManager {
    onLastSegment$: IValueSubject<boolean>;
    fullyBuffered$: IValueSubject<boolean>;
    playingRepresentation$: IValueSubject<Representation['id'] | undefined>;
    error$: ISubject<IError>;
    gaps: Gap[];
    private subscription;
    private kind;
    private container;
    private containerParser;
    private initData;
    private representations;
    private segments;
    private allInitsLoaded;
    private activeSegments;
    private mediaSource;
    private playingRepresentationId;
    private downloadingRepresentationId;
    private switchingToRepresentationId;
    private sourceBuffer;
    private downloadAbortController;
    private destroyAbortController;
    private getCurrentPosition;
    private tuning;
    private forwardBufferTarget;
    private fetcher;
    private bufferLimit;
    private sourceBufferTaskQueue;
    private gapDetectionIdleCallback;
    private initLoadIdleCallback;
    private failedDownloads;
    constructor(kind: RepresentationKind, mediaSource: MediaSource, container: Container, representations: Representation[], { fetcher, tuning, getCurrentPosition }: Dependencies);
    startWith: (param_0: string) => Promise<void | undefined>;
    switchTo: (param_0: string) => Promise<void | undefined>;
    abort(): void;
    maintain(currentPosition: Milliseconds): void;
    findSegmentStartTime(position: Milliseconds): Milliseconds | undefined;
    setTarget(time: Milliseconds): void;
    destroy(): void;
    private selectForwardBufferSegments;
    private loadSegments;
    private onSegmentDownloadError;
    /**
     * Закидываем в буфер сегменты атомарнее чем сегмент целиком. Например, по боксам в мпеге и по блокам в вебме.
     * Таким образом не ждём его полной загрузки и готовы играть его намного быстрее
     * @param dataView – данные, размер буфера – весь запрос
     * @param globalFrom – Отступ dataView от начала файла, совпадает с отсупами сегментов
     * @param loaded – Объём загруженных в dataView данных (всё что больше – пока нули)
     * @private
     */
    private onSomeDataLoaded;
    private abortSegment;
    private loadNextInit;
    private loadInit;
    private pruneBuffer;
    private abortBuffer;
    private detectGaps;
    private detectGapsWhenIdle;
    private checkEjectedSegments;
}
