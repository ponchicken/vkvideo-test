import { HttpConnectionType } from "../../../player/types";
import type ThroughputEstimator from "../../../utils/ThroughputEstimator";
import { Byte, IValueSubject, Milliseconds, IRange } from '@vkontakte/videoplayer-shared';
import { GenericContainerParser, Segment, SegmentReference } from './types';
export declare enum RangeMethod {
    HEADER = 0,
    PARAM = 1
}
export interface IParams {
    throughputEstimator?: ThroughputEstimator;
    requestQuic: boolean;
}
export declare type Priority = 'high' | 'low' | 'auto';
export interface FetchParams {
    range?: IRange<Byte>;
    rangeMethod?: RangeMethod;
    onProgress?: (view: DataView, loaded: Byte) => void;
    signal?: AbortSignal;
    priority?: Priority;
    measureThroughput?: boolean;
}
export declare type RepresentationFetchResult = {
    segments: Segment[];
    dataView: DataView;
};
export declare class Fetcher {
    private throughputEstimator;
    private requestQuic;
    lastConnectionType$: IValueSubject<HttpConnectionType | undefined>;
    lastConnectionReused$: IValueSubject<boolean | undefined>;
    lastRequestFirstBytes$: IValueSubject<Milliseconds | undefined>;
    private abortAllController;
    private subscription;
    constructor({ throughputEstimator, requestQuic }: IParams);
    private onHeadersReceived;
    fetchManifest: (param_0: string) => Promise<string | null | undefined>;
    fetch: (param_0: string, param_1: FetchParams) => Promise<ArrayBuffer | null | undefined>;
    fetchRepresentation(segmentReference: SegmentReference, parser: GenericContainerParser<unknown>, priority?: Priority): Promise<RepresentationFetchResult | null>;
    destroy(): void;
    private fetchByteRangeRepresentation;
    private fetchTemplateRepresentation;
}
export declare const suppressAbort: (e: Error | unknown) => void;
