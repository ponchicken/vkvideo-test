import { Byte, Milliseconds } from '@vkontakte/videoplayer-shared';
export declare enum Tag {
    EBML = 440786851,
    EBMLVersion = 17030,
    EBMLReadVersion = 17143,
    EBMLMaxIDLength = 17138,
    EBMLMaxSizeLength = 17139,
    DocType = 17026,
    DocTypeVersion = 17031,
    DocTypeReadVersion = 17029,
    Void = 236,
    Segment = 408125543,
    SeekHead = 290298740,
    Seek = 19899,
    SeekID = 21419,
    SeekPosition = 21420,
    Info = 357149030,
    TimestampScale = 2807729,
    Duration = 17545,
    Tracks = 374648427,
    Chapters = 272869232,
    Cluster = 524531317,
    Timestamp = 231,
    SilentTracks = 22612,
    SilentTrackNumber = 22743,
    Position = 167,
    PrevSize = 171,
    SimpleBlock = 163,
    BlockGroup = 160,
    EncryptedBlock = 175,
    Attachments = 423732329,
    Tags = 307544935,
    Cues = 475249515,
    CuePoint = 187,
    CueTime = 179,
    CueTrackPositions = 183,
    CueTrack = 247,
    CueClusterPosition = 241,
    CueRelativePosition = 240,
    CueDuration = 178,
    CueBlockNumber = 21368,
    CueCodecState = 234,
    CueReference = 219,
    CueRefTime = 150
}
export declare type UnknownTag = string;
export declare enum Type {
    SignedInteger = "int",
    UnsignedInteger = "uint",
    Float = "float",
    String = "string",
    UTF8 = "utf8",
    Date = "date",
    Master = "master",
    Binary = "binary"
}
declare type TagValue<ExactType extends Type> = ExactType extends Type.SignedInteger ? number : ExactType extends Type.UnsignedInteger ? number : ExactType extends Type.Float ? number : ExactType extends Type.String ? string : ExactType extends Type.UTF8 ? string : ExactType extends Type.Date ? Milliseconds : ExactType extends Type.Master ? DataView : ExactType extends Type.Binary ? DataView : never;
export declare type ParsedTag = {
    tag: Tag | UnknownTag;
    type: Type;
    tagHeaderSize: Byte;
    tagSize: Byte;
    value: DataView;
    valueSize: Byte;
};
export declare const parseTag: (view: DataView) => ParsedTag;
export declare const parseUint: (view: DataView, size?: Byte) => number;
export declare const parseValue: <T extends Type>(view: DataView, type: T) => TagValue<T>;
export declare const parseRecursively: (view: DataView, onTag: (tag: ParsedTag) => boolean) => void;
export declare const validateHeader: (view: DataView) => boolean;
export {};
