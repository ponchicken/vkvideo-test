import { VideoFormat } from "../player/types";
import { Byte, Milliseconds } from '@vkontakte/videoplayer-shared';
export declare type ITuningConfig = {
    throughputEstimator: {
        emaAlphaSlow: number;
        emaAlphaFast: number;
        changeThreshold: number;
        useBrowserEstimation: boolean;
        rttPenaltyRequestSize: Byte;
        streamMinSampleSize: Byte;
        streamMinSampleTime: Milliseconds;
        deviationDepth: number;
        deviationFactor: number;
    };
    autoTrackSelection: {
        bitrateFactorAtEmptyBuffer: number;
        bitrateFactorAtFullBuffer: number;
        limitByContainer: boolean;
        usePixelRatio: boolean;
        containerSizeFactor: number;
        lazyQualitySwitch: boolean;
        minBufferToSwitchUp: number;
        considerPlaybackRate: boolean;
        trackCooldown: Milliseconds;
    };
    dash: {
        /** @deprecated */
        forwardBufferTarget: Milliseconds;
        forwardBufferTargetAuto: Milliseconds;
        forwardBufferTargetManual: Milliseconds;
        segmentRequestSize: Byte;
        representationSwitchForwardBufferGap: Milliseconds;
        enableSubSegmentBufferFeeding: boolean;
        segmentTimelineTolerance: Milliseconds;
        useFetchPriorityHints: boolean;
    };
    downloadBackoff: {
        bufferThreshold: Milliseconds;
        start: Milliseconds;
        factor: number;
        max: Milliseconds;
        random: number;
    };
    live: {
        minBuffer: Milliseconds;
        minBufferSegments: number;
        lowLatencyMinBuffer: Milliseconds;
        lowLatencyMinBufferSegments: number;
    };
    enableTelemetryAtStart: boolean;
    formatsToAvoid: VideoFormat[];
    disableChromecast: boolean;
    chromecastReceiverId: string | undefined;
    useWebmBigRequest: boolean;
    bigRequestMinInitSize: Byte;
    bigRequestMinDataSize: Byte;
    stripRangeHeader: boolean;
    flushShortLoopedBuffers: boolean;
    insufficientBufferRuleMargin: Milliseconds;
    dashSeekInSegmentDurationThreshold: Milliseconds;
    dashSeekInSegmentAlwaysSeekDelta: Milliseconds;
    endGapTolerance: Milliseconds;
    stallIgnoreThreshold: Milliseconds;
    gapWatchdogInterval: Milliseconds;
    requestQuick: boolean;
    useDashJs: boolean;
    useHlsJs: boolean;
    webrtc: {
        connectionRetryMaxNumber: number;
    };
};
export declare type IOptionalTuningConfig = {
    [key in keyof ITuningConfig]?: Partial<ITuningConfig[key]>;
};
export declare const fillDefault: (partial: IOptionalTuningConfig) => ITuningConfig;
