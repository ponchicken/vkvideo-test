import { Byte, Kbps, Milliseconds, IRange } from '@vkontakte/videoplayer-shared';
export declare enum RepresentationKind {
    VIDEO = "video",
    AUDIO = "audio",
    TEXT = "text"
}
export declare enum Profile {
    WEBM_AS_IN_SPEC = "urn:mpeg:dash:profile:webm-on-demand:2012",
    WEBM_AS_IN_FFMPEG = "urn:webm:dash:profile:webm-on-demand:2012"
}
export interface Representation {
    id: string;
    kind: RepresentationKind;
    segmentReference: SegmentReference;
    profiles: Array<Profile | string>;
    duration?: Milliseconds;
    bitrate: Kbps;
    mime: string;
    codecs: string;
    width: number;
    height: number;
    fps?: number;
    quality?: string;
}
export declare enum SegmentReferencingType {
    BYTE_RANGE = "byteRange",
    TEMPLATE = "template"
}
export declare type ByteRangeSegmentReference = {
    type: SegmentReferencingType.BYTE_RANGE;
    url: string;
    initRange: IRange<Byte>;
    indexRange?: IRange<Byte>;
};
export declare type TemplateSegmentReference = {
    type: SegmentReferencingType.TEMPLATE;
    baseUrl: string;
    initUrl: string;
    segments: {
        url: string;
        time: IRange<Milliseconds>;
    }[];
};
export declare type SegmentReference = ByteRangeSegmentReference | TemplateSegmentReference;
export interface ByteRangeSegment {
    status: SegmentStatus;
    time: IRange<Milliseconds>;
    byte: IRange<Byte>;
}
export interface TemplateSegment {
    status: SegmentStatus;
    time: IRange<Milliseconds>;
    size: Byte | undefined;
    url: string;
}
export declare type Segment = ByteRangeSegment | TemplateSegment;
export declare enum SegmentStatus {
    NONE = "none",
    DOWNLOADING = "downloading",
    DOWNLOADED = "downloaded",
    PARTIALLY_FED = "partially_fed",
    FED = "fed"
}
export interface Manifest {
    duration: Milliseconds | undefined;
    container: Container;
    representations: {
        [key in RepresentationKind]: Representation[];
    };
}
export declare enum Container {
    MP4 = "mp4",
    WEBM = "webm"
}
export interface GenericContainerParser<InitData> {
    validateData(data: DataView): boolean;
    getIndexRange(init: InitData): IRange<Byte> | undefined;
    parseInit(data: DataView): InitData;
    parseSegments(data: DataView, init: InitData): Segment[];
    parseFeedableSegmentChunk(data: DataView): DataView | null;
}
export interface WebmInit {
    segmentStart: Byte;
    segmentEnd: Byte;
    timeScale: number;
    segmentDuration: number;
    cuesSeekPosition?: Byte;
}
export declare type WebmParser = GenericContainerParser<WebmInit>;
export declare type MpegParser = GenericContainerParser<null>;
export declare type ContainerParser = WebmParser | MpegParser;
