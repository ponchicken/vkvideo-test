import { HttpConnectionType } from "../../../player/types";
import { Representation, RepresentationKind, Manifest } from './types';
import StateMachine from "../../../utils/StateMachine/StateMachine";
import type ThroughputEstimator from "../../../utils/ThroughputEstimator";
import { ITuningConfig } from "../../../utils/tuningConfig";
import { ISubject, IValueSubject, Milliseconds, IError } from '@vkontakte/videoplayer-shared';
export declare enum State {
    NONE = "none",
    MANIFEST_LOADED = "manifest_loaded",
    REPRESENTATION_SELECTED = "representation_selected"
}
export interface Params {
    throughputEstimator: ThroughputEstimator;
    tuning: ITuningConfig;
}
export declare class Player {
    private element;
    private source;
    private manifest;
    private tuning;
    private videoBufferManager;
    private audioBufferManager;
    private bufferManagers;
    private throughputEstimator;
    private subscription;
    private fetcher;
    state$: StateMachine<State>;
    currentVideoRepresentation$: IValueSubject<Representation['id'] | undefined>;
    error$: ISubject<IError>;
    lastConnectionType$: IValueSubject<HttpConnectionType | undefined>;
    lastConnectionReused$: IValueSubject<boolean | undefined>;
    lastRequestFirstBytes$: IValueSubject<Milliseconds | undefined>;
    private forceEnded$;
    private gapWatchdogStarted;
    private gapWatchdogSubscription;
    private destroyController;
    constructor(params: Params);
    initManifest: (param_0: HTMLVideoElement, param_1: string) => Promise<Manifest | null | undefined>;
    initRepresentations: (param_0: string, param_1: string | undefined) => Promise<void | undefined>;
    switchRepresentation(kind: RepresentationKind, id: Representation['id']): Promise<void>;
    seek(requestedPosition: Milliseconds, forcePrecise: boolean): void;
    stop(): void;
    setBufferTarget(time: Milliseconds): void;
    destroy(): void;
    private tick;
    private jumGap;
}
