import type { MediaPlayerClass } from 'dashjs';
import { Byte, IError } from '@vkontakte/videoplayer-shared';
import { IDashJSLoadConfig, IDashJSLoader, IInternalDashMetrics, ILoaderConfig } from './dashjsTypes';
interface IParams {
    minInitSize: Byte;
    minDataSize: Byte;
    onDownloadStream?: (stream: ReadableStream) => void;
    onError?: (e: IError) => void;
}
declare class BigRequest {
    private dashJsRequestQueue;
    private activeRequests;
    private dashMetrics;
    private params;
    constructor(params: IParams);
    setMetrics(dashMetrics: IInternalDashMetrics): void;
    queueDashJSRequest(config: IDashJSLoadConfig): void;
    executeNextRequests(): Promise<void>;
    abort(config?: IDashJSLoadConfig): void;
    destroy(): void;
    private sendBigRequest;
    private onBigRequestProgress;
    private onBigRequestError;
    private onBigRequestAbort;
    private static suppressAbort;
    private static suppressStreamErrors;
}
declare class BigRequestLoader implements IDashJSLoader {
    private baseLoader;
    private config;
    private bigRequest;
    constructor(baseLoader: IDashJSLoader, bigRequest: BigRequest, config: ILoaderConfig);
    private static shouldDelegateToBase;
    load(config: IDashJSLoadConfig): void;
    abort(config: IDashJSLoadConfig | undefined): void;
}
export declare const CreateLoaderFactory: (BaseLoaderFactory: any, bigRequest: BigRequest) => (context: unknown) => {
    create: (config: ILoaderConfig) => BigRequestLoader;
};
export declare const registerBigRequestLoader: (player: MediaPlayerClass, params: IParams) => () => void;
export {};
