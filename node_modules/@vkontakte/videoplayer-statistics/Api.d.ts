import { ConnectionReused, ConnectionType, ContentType, Quality, ScreenDestination, StatType } from './types';
import { IApiTransport } from './ApiTransport';
import { ISubject, IError, ValueSubject, IValueObservable } from '@vkontakte/videoplayer-shared';
export interface ILogItem {
    operation: string;
    timestamp: number;
    custom: ILogCustomData;
}
export interface ILogCustomData {
    /**
     * Id видео
     */
    vid: number;
    quality?: Quality;
    dst?: ScreenDestination;
    ct?: ContentType;
    aid?: string;
    place?: string;
    cdn_host?: string;
    connection_type?: ConnectionType;
    connection_reused?: ConnectionReused;
    stat_type?: StatType;
    vk_playlist_id?: string;
    vk_app_id?: string;
    track_code?: string;
    /**
     * Параметр события (имеет разный смысл в каждом из событий)
     */
    param?: any;
}
export interface IApi {
    authorize(authToken?: string): Promise<string | undefined>;
    logRequest(items: ILogItem[]): Promise<void>;
    logBeacon(items: ILogItem[]): void;
    authorized$: IValueObservable<boolean>;
    destroy(): void;
}
export interface IApiParams {
    apiTransport: IApiTransport;
    refreshAuthToken?: () => Promise<string>;
    requestRetryCount: number;
    error$: ISubject<IError>;
}
export default class Api implements IApi {
    private params;
    private uuid;
    private authToken;
    private sessionKey;
    private authorizePromise?;
    private refreshAuthTokenPromise?;
    private consequentAuthErrors;
    authorized$: ValueSubject<boolean>;
    private backoffTimeoutId;
    constructor(params: IApiParams);
    authorize(authToken?: string): Promise<string | undefined>;
    logBeacon(items: ILogItem[]): void;
    logRequest(items: ILogItem[]): Promise<void>;
    destroy(): void;
    private refreshAuthToken;
    private createLogParams;
    private _authorizeWithBackoff;
    private _authorize;
}
