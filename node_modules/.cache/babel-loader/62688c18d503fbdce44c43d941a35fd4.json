{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nexport var useChipsInput = function useChipsInput(props) {\n  var value = props.value,\n      getOptionValue = props.getOptionValue,\n      onChange = props.onChange,\n      onInputChange = props.onInputChange,\n      getNewOptionData = props.getNewOptionData;\n\n  var _React$useState = React.useState(props.inputValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fieldValue = _React$useState2[0],\n      setFieldValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(value !== null && value !== void 0 ? value : []),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedOptions = _React$useState4[0],\n      setSelectedOptions = _React$useState4[1];\n\n  var clearInput = React.useCallback(function () {\n    setFieldValue(\"\");\n    onInputChange({\n      target: {\n        value: \"\"\n      }\n    });\n  }, [onInputChange]);\n  var handleInputChange = React.useCallback(function (e) {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n  var toggleOption = React.useCallback(function (newOption, value) {\n    var newSelectedOptions = selectedOptions.filter(function (option) {\n      return getOptionValue(newOption) !== getOptionValue(option);\n    });\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n  var addOption = React.useCallback(function (newOption) {\n    return toggleOption(newOption, true);\n  }, [toggleOption]);\n  var addOptionFromInput = React.useCallback(function () {\n    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  var removeOption = React.useCallback(function (value) {\n    toggleOption(getNewOptionData(undefined, value), false);\n  }, [toggleOption, getNewOptionData]);\n  React.useEffect(function () {\n    setSelectedOptions(value);\n    return function () {\n      return setSelectedOptions([]);\n    };\n  }, [props.value, value]);\n  React.useEffect(function () {\n    setFieldValue(props.inputValue);\n    return function () {\n      return setFieldValue(\"\");\n    };\n  }, [props.inputValue]);\n  return {\n    fieldValue: fieldValue,\n    setFieldValue: setFieldValue,\n    selectedOptions: selectedOptions,\n    setSelectedOptions: setSelectedOptions,\n    clearInput: clearInput,\n    toggleOption: toggleOption,\n    addOption: addOption,\n    addOptionFromInput: addOptionFromInput,\n    removeOption: removeOption,\n    handleInputChange: handleInputChange\n  };\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,KAD2B,EAExB;EACH,IAAQC,KAAR,GACED,KADF,CAAQC,KAAR;EAAA,IAAeC,cAAf,GACEF,KADF,CAAeE,cAAf;EAAA,IAA+BC,QAA/B,GACEH,KADF,CAA+BG,QAA/B;EAAA,IAAyCC,aAAzC,GACEJ,KADF,CAAyCI,aAAzC;EAAA,IAAwDC,gBAAxD,GACEL,KADF,CAAwDK,gBAAxD;;EAGA,sBAAoCP,KAAK,CAACQ,QAANR,CAAeE,KAAK,CAACO,UAArBT,CAApC;EAAA;EAAA,IAAOU,UAAP;EAAA,IAAmBC,aAAnB;;EACA,uBAA8CX,KAAK,CAACQ,QAANR,CAAeG,KAAf,SAAeA,SAAf,WAAeA,WAAS,EAAxBH,CAA9C;EAAA;EAAA,IAAOY,eAAP;EAAA,IAAwBC,kBAAxB;;EAEA,IAAMC,UAAU,GAAGd,KAAK,CAACe,WAANf,CAAkB,YAAM;IACzCW,aAAa,CAAC,EAAD,CAAbA;IACAL,aAAa,CAAE;MAAEU,MAAM,EAAE;QAAEb,KAAK,EAAE;MAAT;IAAV,CAAF,CAAbG;EAFiB,GAGhB,CAACA,aAAD,CAHgBN,CAAnB;EAKA,IAAMiB,iBAAiB,GAAGjB,KAAK,CAACe,WAANf,CACxB,UAACkB,CAAD,EAA4C;IAC1CP,aAAa,CAACO,CAAC,CAACF,MAAFE,CAASf,KAAV,CAAbQ;IACAL,aAAa,CAAEY,CAAF,CAAbZ;EAHsB,GAKxB,CAACA,aAAD,CALwBN,CAA1B;EAQA,IAAMmB,YAAY,GAAGnB,KAAK,CAACe,WAANf,CACnB,UAACoB,SAAD,EAAoBjB,KAApB,EAAwC;IACtC,IAAMkB,kBAAkB,GAAGT,eAAe,CAACU,MAAhBV,CACzB,UAACW,MAAD;MAAA,OACEnB,cAAc,CAAEgB,SAAF,CAAdhB,KAA+BA,cAAc,CAAEmB,MAAF,CAD/C;IADyB,EAA3B;;IAKA,IAAIpB,KAAK,KAAK,IAAd,EAAoB;MAClBkB,kBAAkB,CAACG,IAAnBH,CAAwBD,SAAxBC;IACD;;IAEDR,kBAAkB,CAACQ,kBAAD,CAAlBR;IACAR,QAAQ,CAAEgB,kBAAF,CAARhB;EAZiB,GAcnB,CAACO,eAAD,EAAkBR,cAAlB,EAAkCC,QAAlC,CAdmBL,CAArB;EAiBA,IAAMyB,SAAS,GAAGzB,KAAK,CAACe,WAANf,CAChB,UAACoB,SAAD;IAAA,OAAuBD,YAAY,CAACC,SAAD,EAAY,IAAZ,CAAnC;EADgB,GAEhB,CAACD,YAAD,CAFgBnB,CAAlB;EAIA,IAAM0B,kBAAkB,GAAG1B,KAAK,CAACe,WAANf,CAAkB,YAAM;IACjD,IAAM2B,YAAY,GAAGjB,UAAH,SAAGA,cAAH,WAAGA,GAAH,MAAGA,aAAU,CAAEkB,IAAZlB,EAArB;;IAEA,IAAIiB,YAAJ,EAAkB;MAChBF,SAAS,CAAClB,gBAAgB,CAAEsB,SAAF,EAAaF,YAAb,CAAjB,CAATF;MACAX,UAAU;IACX;EANwB,GAOxB,CAACW,SAAD,EAAYX,UAAZ,EAAwBP,gBAAxB,EAA0CG,UAA1C,CAPwBV,CAA3B;EAQA,IAAM8B,YAAY,GAAG9B,KAAK,CAACe,WAANf,CACnB,UAACG,KAAD,EAA4B;IAC1BgB,YAAY,CAACZ,gBAAgB,CAAEsB,SAAF,EAAa1B,KAAb,CAAjB,EAAgD,KAAhD,CAAZgB;EAFiB,GAInB,CAACA,YAAD,EAAeZ,gBAAf,CAJmBP,CAArB;EAOAA,KAAK,CAAC+B,SAAN/B,CAAgB,YAAM;IACpBa,kBAAkB,CAACV,KAAD,CAAlBU;IAEA,OAAO;MAAA,OAAMA,kBAAkB,CAAC,EAAD,CAAxB;IAAP;EAHF,GAIG,CAACX,KAAK,CAACC,KAAP,EAAcA,KAAd,CAJHH;EAMAA,KAAK,CAAC+B,SAAN/B,CAAgB,YAAM;IACpBW,aAAa,CAACT,KAAK,CAACO,UAAP,CAAbE;IAEA,OAAO;MAAA,OAAMA,aAAa,CAAC,EAAD,CAAnB;IAAP;EAHF,GAIG,CAACT,KAAK,CAACO,UAAP,CAJHT;EAMA,OAAO;IACLU,UAAU,EAAVA,UADK;IAELC,aAAa,EAAbA,aAFK;IAGLC,eAAe,EAAfA,eAHK;IAILC,kBAAkB,EAAlBA,kBAJK;IAKLC,UAAU,EAAVA,UALK;IAMLK,YAAY,EAAZA,YANK;IAOLM,SAAS,EAATA,SAPK;IAQLC,kBAAkB,EAAlBA,kBARK;IASLI,YAAY,EAAZA,YATK;IAULb,iBAAiB,EAAjBA;EAVK,CAAP;AAtEK","names":["React","useChipsInput","props","value","getOptionValue","onChange","onInputChange","getNewOptionData","useState","inputValue","fieldValue","setFieldValue","selectedOptions","setSelectedOptions","clearInput","useCallback","target","handleInputChange","e","toggleOption","newOption","newSelectedOptions","filter","option","push","addOption","addOptionFromInput","trimmedValue","trim","undefined","removeOption","useEffect"],"sources":["/Users/al.balandin/code/vkvideo-test/node_modules/@vkontakte/vkui/src/components/ChipsInput/useChipsInput.ts"],"sourcesContent":["import * as React from \"react\";\nimport {\n  ChipsInputOption,\n  ChipsInputProps,\n  ChipsInputValue,\n} from \"./ChipsInput\";\n\nexport const useChipsInput = <Option extends ChipsInputOption>(\n  props: Partial<ChipsInputProps<Option>>\n) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } =\n    props;\n\n  const [fieldValue, setFieldValue] = React.useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = React.useState(value ?? []);\n\n  const clearInput = React.useCallback(() => {\n    setFieldValue(\"\");\n    onInputChange!({ target: { value: \"\" } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(e.target.value);\n      onInputChange!(e);\n    },\n    [onInputChange]\n  );\n\n  const toggleOption = React.useCallback(\n    (newOption: Option, value?: boolean) => {\n      const newSelectedOptions = selectedOptions.filter(\n        (option: Option) =>\n          getOptionValue!(newOption) !== getOptionValue!(option)\n      );\n\n      if (value === true) {\n        newSelectedOptions.push(newOption);\n      }\n\n      setSelectedOptions(newSelectedOptions);\n      onChange!(newSelectedOptions);\n    },\n    [selectedOptions, getOptionValue, onChange]\n  );\n\n  const addOption = React.useCallback(\n    (newOption: Option) => toggleOption(newOption, true),\n    [toggleOption]\n  );\n  const addOptionFromInput = React.useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData!(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = React.useCallback(\n    (value: ChipsInputValue) => {\n      toggleOption(getNewOptionData!(undefined, value as string), false);\n    },\n    [toggleOption, getNewOptionData]\n  );\n\n  React.useEffect(() => {\n    setSelectedOptions(value as Option[]);\n\n    return () => setSelectedOptions([]);\n  }, [props.value, value]);\n\n  React.useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue(\"\");\n  }, [props.inputValue]);\n\n  return {\n    fieldValue,\n    setFieldValue,\n    selectedOptions,\n    setSelectedOptions,\n    clearInput,\n    toggleOption,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n    handleInputChange,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}