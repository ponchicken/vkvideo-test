{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"length\", \"index\", \"onElementSelect\", \"onClick\", \"onFocus\", \"getRootRef\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { callMultiple } from \"../../lib/callMultiple\";\nimport { stopPropagation } from \"../../lib/utils\";\nimport { classNames } from \"../../lib/classNames\";\nvar MASK_SYMBOL = String.fromCharCode(0x2007);\n\nfunction getMaskElements(length) {\n  var result = [];\n\n  for (var _index = 0; _index < length; _index += 1) {\n    result.push(createScopedElement(\"span\", {\n      key: _index,\n      vkuiClass: \"InputLike__mask\"\n    }, MASK_SYMBOL));\n  }\n\n  return result;\n}\n\nexport var InputLike = function InputLike(_ref) {\n  var _value$length;\n\n  var value = _ref.value,\n      length = _ref.length,\n      index = _ref.index,\n      onElementSelect = _ref.onElementSelect,\n      onClick = _ref.onClick,\n      onFocus = _ref.onFocus,\n      getRootRef = _ref.getRootRef,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var handleElementSelect = React.useCallback(function (event) {\n    stopPropagation(event);\n    onElementSelect === null || onElementSelect === void 0 ? void 0 : onElementSelect(index);\n  }, [index, onElementSelect]);\n  return createScopedElement(\"span\", _extends({\n    vkuiClass: classNames(\"InputLike\", (value === null || value === void 0 ? void 0 : value.length) === length && \"InputLike--full\"),\n    tabIndex: 0,\n    ref: getRootRef,\n    onClick: callMultiple(onClick, handleElementSelect),\n    onFocus: callMultiple(stopPropagation, onFocus)\n  }, props), value === null || value === void 0 ? void 0 : value.slice(0, length - 1), (value === null || value === void 0 ? void 0 : value.slice(length - 1)) && createScopedElement(\"span\", {\n    key: index,\n    vkuiClass: \"InputLike__last_character\"\n  }, value.slice(length - 1)), getMaskElements(length - ((_value$length = value === null || value === void 0 ? void 0 : value.length) !== null && _value$length !== void 0 ? _value$length : 0)));\n};\nInputLike.displayName = \"InputLike\";","map":{"version":3,"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT;AACA,SAASC,eAAT;AACA,SAASC,UAAT;AAaA,IAAMC,WAAW,GAAGC,MAAM,CAACC,YAAPD,CAAoB,MAApBA,CAApB;;AAEA,SAASE,eAAT,CAAyBC,MAAzB,EAAyC;EACvC,IAAMC,MAAM,GAAG,EAAf;;EACA,KAAK,IAAIC,MAAK,GAAG,CAAjB,EAAoBA,MAAK,GAAGF,MAA5B,EAAoCE,MAAK,IAAI,CAA7C,EAAgD;IAC9CD,MAAM,CAACE,IAAPF,CACEG;MAAMC,GAAG,EAAEH,MAAX;MAAkBI,SAAS,EAAC;IAA5B,GACGV,WADH,CADFK;EAKD;;EACD,OAAOA,MAAP;AACD;;AAED,OAAO,IAAMM,SAAmC,GAAG,SAAtCA,SAAsC,OAS7C;EAAA;;EAAA,IARJC,KAQI,QARJA,KAQI;EAAA,IAPJR,MAOI,QAPJA,MAOI;EAAA,IANJE,KAMI,QANJA,KAMI;EAAA,IALJO,eAKI,QALJA,eAKI;EAAA,IAJJC,OAII,QAJJA,OAII;EAAA,IAHJC,OAGI,QAHJA,OAGI;EAAA,IAFJC,UAEI,QAFJA,UAEI;EAAA,IADDC,KACC;;EACJ,IAAMC,mBAAmB,GAAGtB,KAAK,CAACuB,WAANvB,CAC1B,UAACwB,KAAD,EAA0D;IACxDtB,eAAe,CAACsB,KAAD,CAAftB;IACAe,eAAe,SAAfA,mBAAe,WAAfA,2BAAe,CAAGP,KAAH,CAAfO;EAHwB,GAK1B,CAACP,KAAD,EAAQO,eAAR,CAL0BjB,CAA5B;EAQA,OACEY;IACEE,SAAS,EAAEX,UAAU,CACnB,WADmB,EAEnB,MAAK,SAALa,SAAK,WAALA,iBAAK,CAAER,MAAP,MAAkBA,MAAlB,qBAFmB,CADvB;IAKEiB,QAAQ,EAAE,CALZ;IAMEC,GAAG,EAAEN,UANP;IAOEF,OAAO,EAAEjB,YAAY,CAACiB,OAAD,EAAUI,mBAAV,CAPvB;IAQEH,OAAO,EAAElB,YAAY,CAACC,eAAD,EAAkBiB,OAAlB;EARvB,GASME,KATN,GAWGL,KAXH,SAWGA,SAXH,WAWGA,GAXH,MAWGA,QAAK,CAAEW,KAAPX,CAAa,CAAbA,EAAgBR,MAAM,GAAG,CAAzBQ,CAXH,EAYG,MAAK,SAALA,SAAK,WAALA,iBAAK,CAAEW,KAAPX,CAAaR,MAAM,GAAG,CAAtBQ,MACCJ;IAAMC,GAAG,EAAEH,KAAX;IAAkBI,SAAS,EAAC;EAA5B,GACGE,KAAK,CAACW,KAANX,CAAYR,MAAM,GAAG,CAArBQ,CADH,CAbJ,EAiBGT,eAAe,CAACC,MAAM,qBAAIQ,KAAJ,SAAIA,SAAJ,WAAIA,GAAJ,MAAIA,QAAK,CAAER,MAAX,yDAAqB,CAArB,CAAP,CAjBlB,CADF;AAlBK;AAyCPO,SAAS,CAACa,WAAVb,GAAwB,WAAxBA","names":["React","callMultiple","stopPropagation","classNames","MASK_SYMBOL","String","fromCharCode","getMaskElements","length","result","index","push","createScopedElement","key","vkuiClass","InputLike","value","onElementSelect","onClick","onFocus","getRootRef","props","handleElementSelect","useCallback","event","tabIndex","ref","slice","displayName"],"sources":["/Users/al.balandin/code/vkvideo-test/node_modules/@vkontakte/vkui/src/components/InputLike/InputLike.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { callMultiple } from \"../../lib/callMultiple\";\nimport { stopPropagation } from \"../../lib/utils\";\nimport { classNames } from \"../../lib/classNames\";\nimport { HasRootRef } from \"../../types\";\nimport \"./InputLike.css\";\n\nexport interface InputLikeProps\n  extends React.HTMLAttributes<HTMLSpanElement>,\n    HasRootRef<HTMLSpanElement> {\n  length: number;\n  index: number;\n  value?: string;\n  onElementSelect?(index: number): void;\n}\n\nconst MASK_SYMBOL = String.fromCharCode(0x2007);\n\nfunction getMaskElements(length: number) {\n  const result = [];\n  for (let index = 0; index < length; index += 1) {\n    result.push(\n      <span key={index} vkuiClass=\"InputLike__mask\">\n        {MASK_SYMBOL}\n      </span>\n    );\n  }\n  return result;\n}\n\nexport const InputLike: React.FC<InputLikeProps> = ({\n  value,\n  length,\n  index,\n  onElementSelect,\n  onClick,\n  onFocus,\n  getRootRef,\n  ...props\n}) => {\n  const handleElementSelect = React.useCallback(\n    (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n      stopPropagation(event);\n      onElementSelect?.(index);\n    },\n    [index, onElementSelect]\n  );\n\n  return (\n    <span\n      vkuiClass={classNames(\n        \"InputLike\",\n        value?.length === length && `InputLike--full`\n      )}\n      tabIndex={0}\n      ref={getRootRef}\n      onClick={callMultiple(onClick, handleElementSelect)}\n      onFocus={callMultiple(stopPropagation, onFocus)}\n      {...props}\n    >\n      {value?.slice(0, length - 1)}\n      {value?.slice(length - 1) && (\n        <span key={index} vkuiClass=\"InputLike__last_character\">\n          {value.slice(length - 1)}\n        </span>\n      )}\n      {getMaskElements(length - (value?.length ?? 0))}\n    </span>\n  );\n};\n\nInputLike.displayName = \"InputLike\";\n"]},"metadata":{},"sourceType":"module"}