{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"onRemove\", \"removePlaceholder\", \"onDragFinish\", \"before\", \"after\", \"disabled\", \"removable\", \"draggable\", \"selectable\", \"Component\", \"onChange\", \"name\", \"value\", \"checked\", \"defaultChecked\", \"getRootRef\", \"draggerLabel\", \"className\", \"style\"],\n    _excluded2 = [\"dragging\", \"rootElRef\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { classNames } from \"../../lib/classNames\";\nimport { noop } from \"../../lib/utils\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, IOS, VKCOM } from \"../../lib/platform\";\nimport SimpleCell from \"../SimpleCell/SimpleCell\";\nimport { Removable } from \"../Removable/Removable\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useDraggable } from \"./useDraggable\";\nimport { ListContext } from \"../List/ListContext\";\nimport { CellDragger } from \"./CellDragger/CellDragger\";\nimport { CellCheckbox } from \"./CellCheckbox/CellCheckbox\";\nvar warn = warnOnce(\"Cell\");\nexport var Cell = function Cell(_ref) {\n  var propsMode = _ref.mode,\n      _ref$onRemove = _ref.onRemove,\n      _onRemove = _ref$onRemove === void 0 ? noop : _ref$onRemove,\n      _ref$removePlaceholde = _ref.removePlaceholder,\n      removePlaceholder = _ref$removePlaceholde === void 0 ? \"Удалить\" : _ref$removePlaceholde,\n      onDragFinish = _ref.onDragFinish,\n      before = _ref.before,\n      after = _ref.after,\n      disabled = _ref.disabled,\n      deprecatedRemovable = _ref.removable,\n      draggable = _ref.draggable,\n      deprecatedSelectable = _ref.selectable,\n      Component = _ref.Component,\n      onChange = _ref.onChange,\n      name = _ref.name,\n      value = _ref.value,\n      checked = _ref.checked,\n      defaultChecked = _ref.defaultChecked,\n      getRootRef = _ref.getRootRef,\n      _ref$draggerLabel = _ref.draggerLabel,\n      draggerLabel = _ref$draggerLabel === void 0 ? \"Перенести ячейку\" : _ref$draggerLabel,\n      className = _ref.className,\n      style = _ref.style,\n      restProps = _objectWithoutProperties(_ref, _excluded); // TODO: удалить перед 5.0.0\n\n\n  var mode = propsMode;\n\n  if (!propsMode && (deprecatedSelectable || deprecatedRemovable)) {\n    mode = deprecatedSelectable ? \"selectable\" : \"removable\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      deprecatedSelectable && warn('Свойство selectable устарелo и будет удалено в 5.0.0. Используйте mode=\"selectable\".');\n      deprecatedRemovable && warn('Свойство removable устарелo и будет удалено в 5.0.0. Используйте mode=\"removable\".');\n    }\n  } // /end TODO\n\n\n  var selectable = mode === \"selectable\";\n  var removable = mode === \"removable\";\n  var platform = usePlatform();\n\n  var _useDraggable = useDraggable({\n    onDragFinish: onDragFinish\n  }),\n      dragging = _useDraggable.dragging,\n      rootElRef = _useDraggable.rootElRef,\n      draggableProps = _objectWithoutProperties(_useDraggable, _excluded2);\n\n  var _React$useContext = React.useContext(ListContext),\n      toggleDrag = _React$useContext.toggleDrag;\n\n  React.useEffect(function () {\n    if (dragging) {\n      toggleDrag(true);\n      return function () {\n        return toggleDrag(false);\n      };\n    }\n\n    return undefined;\n  }, [dragging, toggleDrag]);\n  var dragger;\n\n  if (draggable) {\n    dragger = createScopedElement(CellDragger, _extends({\n      vkuiClass: \"Cell__dragger\",\n      \"aria-label\": draggerLabel\n    }, draggableProps));\n  }\n\n  var checkbox;\n\n  if (selectable) {\n    var checkboxProps = {\n      name: name,\n      value: value,\n      onChange: onChange,\n      defaultChecked: defaultChecked,\n      checked: checked,\n      disabled: disabled\n    };\n    checkbox = createScopedElement(CellCheckbox, _extends({\n      vkuiClass: \"Cell__checkbox\"\n    }, checkboxProps));\n  }\n\n  var simpleCellDisabled = draggable && !selectable || removable || disabled;\n  var hasActive = !simpleCellDisabled && !dragging;\n  var cellClasses = classNames(getClassName(\"Cell\", platform), {\n    \"Cell--dragging\": dragging,\n    \"Cell--removable\": removable,\n    \"Cell--selectable\": selectable,\n    \"Cell--disabled\": disabled\n  });\n  var simpleCell = createScopedElement(SimpleCell, _extends({\n    hasActive: hasActive,\n    hasHover: hasActive\n  }, restProps, {\n    vkuiClass: \"Cell__content\",\n    disabled: simpleCellDisabled,\n    Component: selectable ? \"label\" : Component,\n    before: createScopedElement(React.Fragment, null, draggable && (platform === ANDROID || platform === VKCOM) && dragger, selectable && checkbox, before),\n    after: createScopedElement(React.Fragment, null, draggable && platform === IOS && dragger, after)\n  }));\n\n  if (removable) {\n    return createScopedElement(Removable, {\n      vkuiClass: cellClasses,\n      className: className,\n      style: style,\n      getRootRef: rootElRef,\n      removePlaceholder: removePlaceholder,\n      onRemove: function onRemove(e) {\n        return _onRemove(e, rootElRef === null || rootElRef === void 0 ? void 0 : rootElRef.current);\n      }\n    }, simpleCell);\n  }\n\n  return createScopedElement(\"div\", {\n    vkuiClass: cellClasses,\n    className: className,\n    style: style,\n    ref: rootElRef\n  }, simpleCell);\n};","map":{"version":3,"mappings":"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","names":["React","classNames","noop","warnOnce","getClassName","ANDROID","IOS","VKCOM","SimpleCell","Removable","usePlatform","useDraggable","ListContext","CellDragger","CellCheckbox","warn","Cell","propsMode","mode","onRemove","removePlaceholder","onDragFinish","before","after","disabled","deprecatedRemovable","removable","draggable","deprecatedSelectable","selectable","Component","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","className","style","restProps","process","env","NODE_ENV","platform","dragging","rootElRef","draggableProps","useContext","toggleDrag","useEffect","undefined","dragger","createScopedElement","vkuiClass","checkbox","checkboxProps","simpleCellDisabled","hasActive","cellClasses","simpleCell","hasHover","Fragment","e","current","ref"],"sources":["/Users/al.balandin/code/vkvideo-test/node_modules/@vkontakte/vkui/src/components/Cell/Cell.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { classNames } from \"../../lib/classNames\";\nimport { noop } from \"../../lib/utils\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, IOS, VKCOM } from \"../../lib/platform\";\nimport SimpleCell, { SimpleCellProps } from \"../SimpleCell/SimpleCell\";\nimport { HasPlatform } from \"../../types\";\nimport { Removable, RemovableProps } from \"../Removable/Removable\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useDraggable } from \"./useDraggable\";\nimport { ListContext } from \"../List/ListContext\";\nimport { CellDragger } from \"./CellDragger/CellDragger\";\nimport { CellCheckbox, CellCheckboxProps } from \"./CellCheckbox/CellCheckbox\";\nimport \"./Cell.css\";\n\nexport interface CellProps\n  extends SimpleCellProps,\n    HasPlatform,\n    RemovableProps {\n  mode?: \"removable\" | \"selectable\";\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * @deprecated Будет удалено в 5.0.0. Используйте mode=\"removable\"\n   */\n  removable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * @deprecated Будет удалено в 5.0.0. Используйте mode=\"selectable\"\n   */\n  selectable?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: ({ from, to }: { from: number; to: number }) => void;\n  /**\n   * aria-label для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\nconst warn = warnOnce(\"Cell\");\nexport const Cell: React.FC<CellProps> = ({\n  mode: propsMode, // TODO: убрать переименование в propsMode перед 5.0.0\n  onRemove = noop,\n  removePlaceholder = \"Удалить\",\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  removable: deprecatedRemovable, // TODO: удалить перед 5.0.0\n  draggable,\n  selectable: deprecatedSelectable, // TODO: удалить перед 5.0.0\n  Component,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = \"Перенести ячейку\",\n  className,\n  style,\n  ...restProps\n}: CellProps) => {\n  // TODO: удалить перед 5.0.0\n  let mode: CellProps[\"mode\"] = propsMode;\n\n  if (!propsMode && (deprecatedSelectable || deprecatedRemovable)) {\n    mode = deprecatedSelectable ? \"selectable\" : \"removable\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      deprecatedSelectable &&\n        warn(\n          'Свойство selectable устарелo и будет удалено в 5.0.0. Используйте mode=\"selectable\".'\n        );\n      deprecatedRemovable &&\n        warn(\n          'Свойство removable устарелo и будет удалено в 5.0.0. Используйте mode=\"removable\".'\n        );\n    }\n  }\n  // /end TODO\n\n  const selectable = mode === \"selectable\";\n  const removable = mode === \"removable\";\n\n  const platform = usePlatform();\n\n  const { dragging, rootElRef, ...draggableProps } = useDraggable({\n    onDragFinish,\n  });\n\n  const { toggleDrag } = React.useContext(ListContext);\n  React.useEffect(() => {\n    if (dragging) {\n      toggleDrag(true);\n      return () => toggleDrag(false);\n    }\n    return undefined;\n  }, [dragging, toggleDrag]);\n\n  let dragger;\n  if (draggable) {\n    dragger = (\n      <CellDragger\n        vkuiClass=\"Cell__dragger\"\n        aria-label={draggerLabel}\n        {...draggableProps}\n      />\n    );\n  }\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      onChange,\n      defaultChecked,\n      checked,\n      disabled,\n    };\n    checkbox = <CellCheckbox vkuiClass=\"Cell__checkbox\" {...checkboxProps} />;\n  }\n\n  const simpleCellDisabled =\n    (draggable && !selectable) || removable || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(getClassName(\"Cell\", platform), {\n    \"Cell--dragging\": dragging,\n    \"Cell--removable\": removable,\n    \"Cell--selectable\": selectable,\n    \"Cell--disabled\": disabled,\n  });\n\n  const simpleCell = (\n    <SimpleCell\n      hasActive={hasActive}\n      hasHover={hasActive}\n      {...restProps}\n      vkuiClass=\"Cell__content\"\n      disabled={simpleCellDisabled}\n      Component={selectable ? \"label\" : Component}\n      before={\n        <React.Fragment>\n          {draggable && (platform === ANDROID || platform === VKCOM) && dragger}\n          {selectable && checkbox}\n          {before}\n        </React.Fragment>\n      }\n      after={\n        <React.Fragment>\n          {draggable && platform === IOS && dragger}\n          {after}\n        </React.Fragment>\n      }\n    />\n  );\n\n  if (removable) {\n    return (\n      <Removable\n        vkuiClass={cellClasses}\n        className={className}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef?.current)}\n      >\n        {simpleCell}\n      </Removable>\n    );\n  }\n\n  return (\n    <div\n      vkuiClass={cellClasses}\n      className={className}\n      style={style}\n      ref={rootElRef}\n    >\n      {simpleCell}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}