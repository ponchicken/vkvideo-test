{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\n\nvar findAllIncludes = function findAllIncludes() {\n  var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var search = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var includes = [];\n  var i = target.indexOf(search);\n\n  while (i !== -1) {\n    includes.push(i);\n    i = target.indexOf(search, i + 1);\n  }\n\n  return includes;\n};\n\nvar letterRegexp; // На момент написания флаг u не поддерживался рядом браузеров, поэтому добавили фоллбэк.\n\ntry {\n  letterRegexp = new RegExp(\"\\\\p{L}\", \"u\");\n} catch (e) {}\n\nexport var defaultFilterFn = function defaultFilterFn() {\n  var _getOptionLabel;\n\n  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var option = arguments.length > 1 ? arguments[1] : undefined;\n  var getOptionLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (option) {\n    return option.label;\n  };\n  query = query.toLocaleLowerCase();\n  var label = (_getOptionLabel = getOptionLabel(option)) === null || _getOptionLabel === void 0 ? void 0 : _getOptionLabel.toLocaleLowerCase();\n\n  if (label !== null && label !== void 0 && label.startsWith(query)) {\n    return true;\n  }\n\n  var includes = findAllIncludes(label, query); // Ищем вхождение перед началом которого не буква\n\n  if (letterRegexp && label) {\n    var _iterator = _createForOfIteratorHelper(includes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _index = _step.value;\n\n        if (!letterRegexp.test(label[_index - 1])) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    // если regexp не поддерживается, то ищем любое вхождение\n    return includes.length > 0;\n  }\n\n  return false;\n};","map":{"version":3,"mappings":";;AAOA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAA8B;EAAA,IAA7BC,MAA6B,uEAApB,EAAoB;EAAA,IAAhBC,MAAgB,uEAAP,EAAO;EACpD,IAAMC,QAAQ,GAAG,EAAjB;EAEA,IAAIC,CAAC,GAAGH,MAAM,CAACI,OAAPJ,CAAeC,MAAfD,CAAR;;EACA,OAAOG,CAAC,KAAK,CAAC,CAAd,EAAiB;IACfD,QAAQ,CAACG,IAATH,CAAcC,CAAdD;IACAC,CAAC,GAAGH,MAAM,CAACI,OAAPJ,CAAeC,MAAfD,EAAuBG,CAAC,GAAG,CAA3BH,CAAJG;EACD;;EAED,OAAOD,QAAP;AATF;;AAYA,IAAII,YAAJ,C,CAEA;;AACA,IAAI;EACFA,YAAY,GAAG,IAAIC,MAAJ,CAAW,QAAX,EAAqB,GAArB,CAAfD;AADF,EAEE,OAAOE,CAAP,EAAU,CAAE;;AAEd,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAI1B;EAAA;;EAAA,IAHHC,KAGG,uEAHK,EAGL;EAAA,IAFHC,MAEG;EAAA,IADHC,cACG,uEAD8B,UAACD,MAAD;IAAA,OAAYA,MAAM,CAACE,KAAnB;EAC9B;EACHH,KAAK,GAAGA,KAAK,CAACI,iBAANJ,EAARA;EACA,IAAIG,KAAK,sBAAGD,cAAc,CAACD,MAAD,CAAjB,oDAAGI,gBAAwBD,iBAAxB,EAAZ;;EAEA,IAAID,KAAJ,SAAIA,SAAJ,WAAIA,SAAK,CAAEG,UAAPH,CAAkBH,KAAlBG,CAAJ,EAA8B;IAC5B,OAAO,IAAP;EACD;;EAED,IAAMX,QAAQ,GAAGH,eAAe,CAACc,KAAD,EAAQH,KAAR,CAAhC,CARG,CAUH;;EACA,IAAIJ,YAAY,IAAIO,KAApB,EAA2B;IAAA,2CACLX,QADK;IAAA;;IAAA;MACzB,oDAA8B;QAAA,IAAnBe,MAAmB;;QAC5B,IAAI,CAACX,YAAY,CAACY,IAAbZ,CAAkBO,KAAK,CAACI,MAAK,GAAG,CAAT,CAAvBX,CAAL,EAA0C;UACxC,OAAO,IAAP;QACD;MACF;IALwB;MAAAa;IAAA;MAAAA;IAAA;EAA3B,OAMO;IACL;IACA,OAAOjB,QAAQ,CAACkB,MAATlB,GAAkB,CAAzB;EACD;;EAED,OAAO,KAAP;AA1BK","names":["findAllIncludes","target","search","includes","i","indexOf","push","letterRegexp","RegExp","e","defaultFilterFn","query","option","getOptionLabel","label","toLocaleLowerCase","_getOptionLabel","startsWith","index","test","_iterator","length"],"sources":["/Users/al.balandin/code/vkvideo-test/node_modules/@vkontakte/vkui/src/lib/select.ts"],"sourcesContent":["type Option = {\n  label?: string;\n  [index: string]: any;\n};\n\ntype GetOptionLabel = (option: Option) => string | undefined;\n\nconst findAllIncludes = (target = \"\", search = \"\") => {\n  const includes = [];\n\n  let i = target.indexOf(search);\n  while (i !== -1) {\n    includes.push(i);\n    i = target.indexOf(search, i + 1);\n  }\n\n  return includes;\n};\n\nlet letterRegexp: RegExp;\n\n// На момент написания флаг u не поддерживался рядом браузеров, поэтому добавили фоллбэк.\ntry {\n  letterRegexp = new RegExp(\"\\\\p{L}\", \"u\");\n} catch (e) {}\n\nexport const defaultFilterFn = (\n  query = \"\",\n  option: Option,\n  getOptionLabel: GetOptionLabel = (option) => option.label\n) => {\n  query = query.toLocaleLowerCase();\n  let label = getOptionLabel(option)?.toLocaleLowerCase();\n\n  if (label?.startsWith(query)) {\n    return true;\n  }\n\n  const includes = findAllIncludes(label, query);\n\n  // Ищем вхождение перед началом которого не буква\n  if (letterRegexp && label) {\n    for (const index of includes) {\n      if (!letterRegexp.test(label[index - 1])) {\n        return true;\n      }\n    }\n  } else {\n    // если regexp не поддерживается, то ищем любое вхождение\n    return includes.length > 0;\n  }\n\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}