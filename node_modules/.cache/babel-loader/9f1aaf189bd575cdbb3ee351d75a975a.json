{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"option\", \"children\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { setMonth, setYear, subMonths, addMonths } from \"date-fns\";\nimport { Icon20ChevronLeftOutline, Icon20ChevronRightOutline, Icon12Dropdown } from \"@vkontakte/icons\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { classNames } from \"../../lib/classNames\";\nimport CustomSelect, { SelectType } from \"../CustomSelect/CustomSelect\";\nimport CustomSelectOption from \"../CustomSelectOption/CustomSelectOption\";\nimport { SizeType } from \"../../hoc/withAdaptivity\";\nimport { getMonths, getYears } from \"../../lib/calendar\";\nimport { LocaleProviderContext } from \"../LocaleProviderContext/LocaleProviderContext\";\nimport Text from \"../Typography/Text/Text\";\n\nvar renderOption = function renderOption(_ref) {\n  var option = _ref.option,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return createScopedElement(CustomSelectOption, props, createScopedElement(\"span\", {\n    vkuiClass: \"CalendarHeader__month_name\"\n  }, children));\n};\n\nexport var CalendarHeader = function CalendarHeader(_ref2) {\n  var viewDate = _ref2.viewDate,\n      onChange = _ref2.onChange,\n      _ref2$prevMonth = _ref2.prevMonth,\n      prevMonth = _ref2$prevMonth === void 0 ? true : _ref2$prevMonth,\n      _ref2$nextMonth = _ref2.nextMonth,\n      nextMonth = _ref2$nextMonth === void 0 ? true : _ref2$nextMonth,\n      _ref2$disablePickers = _ref2.disablePickers,\n      disablePickers = _ref2$disablePickers === void 0 ? false : _ref2$disablePickers,\n      onNextMonth = _ref2.onNextMonth,\n      onPrevMonth = _ref2.onPrevMonth,\n      className = _ref2.className,\n      _ref2$prevMonthAriaLa = _ref2.prevMonthAriaLabel,\n      prevMonthAriaLabel = _ref2$prevMonthAriaLa === void 0 ? \"Предыдущий месяц\" : _ref2$prevMonthAriaLa,\n      _ref2$nextMonthAriaLa = _ref2.nextMonthAriaLabel,\n      nextMonthAriaLabel = _ref2$nextMonthAriaLa === void 0 ? \"Следующий месяц\" : _ref2$nextMonthAriaLa,\n      _ref2$changeMonthAria = _ref2.changeMonthAriaLabel,\n      changeMonthAriaLabel = _ref2$changeMonthAria === void 0 ? \"Изменить месяц\" : _ref2$changeMonthAria,\n      _ref2$changeYearAriaL = _ref2.changeYearAriaLabel,\n      changeYearAriaLabel = _ref2$changeYearAriaL === void 0 ? \"Изменить год\" : _ref2$changeYearAriaL;\n  var locale = React.useContext(LocaleProviderContext);\n  var onMonthsChange = React.useCallback(function (event) {\n    return onChange(setMonth(viewDate, Number(event.target.value)));\n  }, [onChange, viewDate]);\n  var onYearChange = React.useCallback(function (event) {\n    return onChange(setYear(viewDate, Number(event.target.value)));\n  }, [onChange, viewDate]);\n  var months = React.useMemo(function () {\n    return getMonths(locale);\n  }, [locale]);\n  var currentYear = viewDate.getFullYear();\n  var years = React.useMemo(function () {\n    return getYears(currentYear, 100);\n  }, [currentYear]);\n  var formatter = new Intl.DateTimeFormat(locale, {\n    year: \"numeric\",\n    month: \"long\"\n  });\n  return createScopedElement(\"div\", {\n    vkuiClass: \"CalendarHeader\",\n    className: className\n  }, prevMonth && createScopedElement(Tappable, {\n    vkuiClass: classNames(\"CalendarHeader__nav-icon\", \"CalendarHeader__nav-icon-prev\"),\n    onClick: onPrevMonth,\n    \"aria-label\": \"\".concat(prevMonthAriaLabel, \", \").concat(formatter.format(subMonths(viewDate, 1)))\n  }, createScopedElement(Icon20ChevronLeftOutline, {\n    width: 30,\n    height: 30\n  })), createScopedElement(\"div\", {\n    vkuiClass: \"CalendarHeader__pickers\"\n  }, disablePickers ? createScopedElement(React.Fragment, null, createScopedElement(Text, {\n    weight: \"medium\",\n    vkuiClass: \"CalendarHeader__pickers-placeholder\"\n  }, new Intl.DateTimeFormat(locale, {\n    month: \"long\"\n  }).format(viewDate)), createScopedElement(Text, {\n    weight: \"medium\",\n    vkuiClass: \"CalendarHeader__pickers-placeholder\"\n  }, new Intl.DateTimeFormat(locale, {\n    year: \"numeric\"\n  }).format(viewDate))) : createScopedElement(React.Fragment, null, createScopedElement(CustomSelect, {\n    value: viewDate.getMonth(),\n    options: months,\n    renderOption: renderOption,\n    dropdownOffsetDistance: 4,\n    fixDropdownWidth: false,\n    sizeY: SizeType.COMPACT,\n    icon: createScopedElement(Icon12Dropdown, null),\n    onChange: onMonthsChange,\n    forceDropdownPortal: false,\n    selectType: SelectType.Plain,\n    \"aria-label\": changeMonthAriaLabel\n  }), createScopedElement(CustomSelect, {\n    value: viewDate.getFullYear(),\n    options: years,\n    dropdownOffsetDistance: 4,\n    fixDropdownWidth: false,\n    sizeY: SizeType.COMPACT,\n    icon: createScopedElement(Icon12Dropdown, null),\n    onChange: onYearChange,\n    forceDropdownPortal: false,\n    selectType: SelectType.Plain,\n    \"aria-label\": changeYearAriaLabel\n  }))), nextMonth && createScopedElement(Tappable, {\n    vkuiClass: classNames(\"CalendarHeader__nav-icon\", \"CalendarHeader__nav-icon-next\"),\n    onClick: onNextMonth,\n    \"aria-label\": \"\".concat(nextMonthAriaLabel, \", \").concat(formatter.format(addMonths(viewDate, 1)))\n  }, createScopedElement(Icon20ChevronRightOutline, {\n    width: 30,\n    height: 30\n  })));\n};","map":{"version":3,"mappings":"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","names":["React","setMonth","setYear","subMonths","addMonths","Icon20ChevronLeftOutline","Icon20ChevronRightOutline","Icon12Dropdown","Tappable","classNames","CustomSelect","SelectType","CustomSelectOption","SizeType","getMonths","getYears","LocaleProviderContext","Text","renderOption","option","children","props","createScopedElement","vkuiClass","CalendarHeader","viewDate","onChange","prevMonth","nextMonth","disablePickers","onNextMonth","onPrevMonth","className","prevMonthAriaLabel","nextMonthAriaLabel","changeMonthAriaLabel","changeYearAriaLabel","locale","useContext","onMonthsChange","useCallback","event","Number","target","value","onYearChange","months","useMemo","currentYear","getFullYear","years","formatter","Intl","DateTimeFormat","year","month","onClick","format","width","height","Fragment","weight","getMonth","options","dropdownOffsetDistance","fixDropdownWidth","sizeY","COMPACT","icon","forceDropdownPortal","selectType","Plain"],"sources":["/Users/al.balandin/code/vkvideo-test/node_modules/@vkontakte/vkui/src/components/CalendarHeader/CalendarHeader.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { setMonth, setYear, subMonths, addMonths } from \"date-fns\";\nimport {\n  Icon20ChevronLeftOutline,\n  Icon20ChevronRightOutline,\n  Icon12Dropdown,\n} from \"@vkontakte/icons\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { classNames } from \"../../lib/classNames\";\nimport CustomSelect, {\n  CustomSelectProps,\n  SelectType,\n} from \"../CustomSelect/CustomSelect\";\nimport CustomSelectOption from \"../CustomSelectOption/CustomSelectOption\";\nimport { SizeType } from \"../../hoc/withAdaptivity\";\nimport { getMonths, getYears } from \"../../lib/calendar\";\nimport { LocaleProviderContext } from \"../LocaleProviderContext/LocaleProviderContext\";\nimport Text from \"../Typography/Text/Text\";\nimport \"./CalendarHeader.css\";\n\nexport interface CalendarHeaderProps\n  extends Pick<React.HTMLAttributes<HTMLDivElement>, \"className\"> {\n  viewDate: Date;\n  prevMonth?: boolean;\n  nextMonth?: boolean;\n  disablePickers?: boolean;\n  prevMonthAriaLabel?: string;\n  nextMonthAriaLabel?: string;\n  changeMonthAriaLabel?: string;\n  changeYearAriaLabel?: string;\n  onChange(viewDate: Date): void;\n  onNextMonth?(): void;\n  onPrevMonth?(): void;\n}\n\nconst renderOption: CustomSelectProps[\"renderOption\"] = ({\n  option,\n  children,\n  ...props\n}) => {\n  return (\n    <CustomSelectOption {...props}>\n      <span vkuiClass=\"CalendarHeader__month_name\">{children}</span>\n    </CustomSelectOption>\n  );\n};\n\nexport const CalendarHeader: React.FC<CalendarHeaderProps> = ({\n  viewDate,\n  onChange,\n  prevMonth = true,\n  nextMonth = true,\n  disablePickers = false,\n  onNextMonth,\n  onPrevMonth,\n  className,\n  prevMonthAriaLabel = \"Предыдущий месяц\",\n  nextMonthAriaLabel = \"Следующий месяц\",\n  changeMonthAriaLabel = \"Изменить месяц\",\n  changeYearAriaLabel = \"Изменить год\",\n}) => {\n  const locale = React.useContext(LocaleProviderContext);\n  const onMonthsChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) =>\n      onChange(setMonth(viewDate, Number(event.target.value))),\n    [onChange, viewDate]\n  );\n  const onYearChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) =>\n      onChange(setYear(viewDate, Number(event.target.value))),\n    [onChange, viewDate]\n  );\n\n  const months = React.useMemo(() => getMonths(locale), [locale]);\n\n  const currentYear = viewDate.getFullYear();\n\n  const years = React.useMemo(() => getYears(currentYear, 100), [currentYear]);\n\n  const formatter = new Intl.DateTimeFormat(locale, {\n    year: \"numeric\",\n    month: \"long\",\n  });\n\n  return (\n    <div vkuiClass=\"CalendarHeader\" className={className}>\n      {prevMonth && (\n        <Tappable\n          vkuiClass={classNames(\n            \"CalendarHeader__nav-icon\",\n            \"CalendarHeader__nav-icon-prev\"\n          )}\n          onClick={onPrevMonth}\n          aria-label={`${prevMonthAriaLabel}, ${formatter.format(\n            subMonths(viewDate, 1)\n          )}`}\n        >\n          <Icon20ChevronLeftOutline width={30} height={30} />\n        </Tappable>\n      )}\n      <div vkuiClass=\"CalendarHeader__pickers\">\n        {disablePickers ? (\n          <React.Fragment>\n            <Text\n              weight=\"medium\"\n              vkuiClass=\"CalendarHeader__pickers-placeholder\"\n            >\n              {new Intl.DateTimeFormat(locale, {\n                month: \"long\",\n              }).format(viewDate)}\n            </Text>\n            <Text\n              weight=\"medium\"\n              vkuiClass=\"CalendarHeader__pickers-placeholder\"\n            >\n              {new Intl.DateTimeFormat(locale, {\n                year: \"numeric\",\n              }).format(viewDate)}\n            </Text>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <CustomSelect\n              value={viewDate.getMonth()}\n              options={months}\n              renderOption={renderOption}\n              dropdownOffsetDistance={4}\n              fixDropdownWidth={false}\n              sizeY={SizeType.COMPACT}\n              icon={<Icon12Dropdown />}\n              onChange={onMonthsChange}\n              forceDropdownPortal={false}\n              selectType={SelectType.Plain}\n              aria-label={changeMonthAriaLabel}\n            />\n            <CustomSelect\n              value={viewDate.getFullYear()}\n              options={years}\n              dropdownOffsetDistance={4}\n              fixDropdownWidth={false}\n              sizeY={SizeType.COMPACT}\n              icon={<Icon12Dropdown />}\n              onChange={onYearChange}\n              forceDropdownPortal={false}\n              selectType={SelectType.Plain}\n              aria-label={changeYearAriaLabel}\n            />\n          </React.Fragment>\n        )}\n      </div>\n      {nextMonth && (\n        <Tappable\n          vkuiClass={classNames(\n            \"CalendarHeader__nav-icon\",\n            \"CalendarHeader__nav-icon-next\"\n          )}\n          onClick={onNextMonth}\n          aria-label={`${nextMonthAriaLabel}, ${formatter.format(\n            addMonths(viewDate, 1)\n          )}`}\n        >\n          <Icon20ChevronRightOutline width={30} height={30} />\n        </Tappable>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}