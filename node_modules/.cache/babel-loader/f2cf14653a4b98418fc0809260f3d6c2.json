{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _excluded = [\"badge\", \"before\", \"indicator\", \"children\", \"after\", \"description\", \"expandable\", \"multiline\", \"sizeY\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { Icon24Chevron } from \"@vkontakte/icons\";\nimport { ANDROID, IOS } from \"../../lib/platform\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { withAdaptivity, SizeType } from \"../../hoc/withAdaptivity\";\nimport Title from \"../Typography/Title/Title\";\nimport Text from \"../Typography/Text/Text\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport Headline from \"../Typography/Headline/Headline\";\n\nvar SimpleCellTypography = function SimpleCellTypography(props) {\n  var _useAdaptivity = useAdaptivity(),\n      sizeY = _useAdaptivity.sizeY;\n\n  var platform = usePlatform();\n\n  if (sizeY === SizeType.COMPACT) {\n    return createScopedElement(Text, _extends({\n      Component: \"span\",\n      weight: \"regular\"\n    }, props));\n  } else if (platform === ANDROID) {\n    return createScopedElement(Headline, _extends({\n      Component: \"span\",\n      weight: \"regular\"\n    }, props));\n  } else {\n    return createScopedElement(Title, _extends({\n      Component: \"span\",\n      level: \"3\",\n      weight: \"3\"\n    }, props));\n  }\n};\n\nvar SimpleCell = function SimpleCell(_ref) {\n  var badge = _ref.badge,\n      before = _ref.before,\n      indicator = _ref.indicator,\n      children = _ref.children,\n      after = _ref.after,\n      description = _ref.description,\n      expandable = _ref.expandable,\n      multiline = _ref.multiline,\n      sizeY = _ref.sizeY,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var platform = usePlatform();\n  var hasAfter = hasReactNode(after) || expandable && platform === IOS;\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    vkuiClass: classNames(getClassName(\"SimpleCell\", platform), {\n      \"SimpleCell--exp\": expandable,\n      \"SimpleCell--mult\": multiline\n    }, \"SimpleCell--sizeY-\".concat(sizeY))\n  }), before, createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__main\"\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__content\"\n  }, createScopedElement(SimpleCellTypography, {\n    vkuiClass: \"SimpleCell__children\"\n  }, children), hasReactNode(badge) && createScopedElement(\"span\", {\n    vkuiClass: \"SimpleCell__badge\"\n  }, badge)), description && createScopedElement(Subhead, {\n    Component: \"span\",\n    vkuiClass: \"SimpleCell__description\"\n  }, description)), hasReactNode(indicator) && createScopedElement(SimpleCellTypography, {\n    Component: \"span\",\n    vkuiClass: \"SimpleCell__indicator\"\n  }, indicator), hasAfter && createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__after\"\n  }, after, expandable && platform === IOS && createScopedElement(Icon24Chevron, null)));\n}; // eslint-disable-next-line import/no-default-export\n\n\nexport default withAdaptivity(SimpleCell, {\n  sizeY: true\n});","map":{"version":3,"mappings":"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","names":["classNames","getClassName","Tappable","Icon24Chevron","ANDROID","IOS","usePlatform","hasReactNode","useAdaptivity","withAdaptivity","SizeType","Title","Text","Subhead","Headline","SimpleCellTypography","props","sizeY","platform","COMPACT","createScopedElement","Component","weight","level","SimpleCell","badge","before","indicator","children","after","description","expandable","multiline","restProps","hasAfter","vkuiClass"],"sources":["/Users/al.balandin/code/vkvideo-test/node_modules/@vkontakte/vkui/src/components/SimpleCell/SimpleCell.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { HasComponent } from \"../../types\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Tappable, { TappableProps } from \"../Tappable/Tappable\";\nimport { Icon24Chevron } from \"@vkontakte/icons\";\nimport { ANDROID, IOS } from \"../../lib/platform\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { withAdaptivity, SizeType } from \"../../hoc/withAdaptivity\";\nimport Title from \"../Typography/Title/Title\";\nimport Text from \"../Typography/Text/Text\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport Headline from \"../Typography/Headline/Headline\";\nimport \"./SimpleCell.css\";\n\nexport interface SimpleCellOwnProps extends HasComponent {\n  /**\n   * Иконка 28 или `<Avatar size={28|32|40|48|72} />`\n   */\n  before?: React.ReactNode;\n  /**\n   * Иконка 12 или `<Badge />`. Добавится справа от текста `children`.\n   */\n  badge?: React.ReactNode;\n  /**\n   * Контейнер для текста справа от `children`.\n   */\n  indicator?: React.ReactNode;\n  /**\n   * Иконка 24|28 или `<Switch />`. Располагается справа от `indicator`.\n   */\n  after?: React.ReactNode;\n  /**\n   * Контейнер для текста под `children`.\n   */\n  description?: React.ReactNode;\n  /**\n   * Убирает анимацию нажатия\n   */\n  disabled?: boolean;\n  /**\n   * В iOS добавляет chevron справа. Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean;\n  multiline?: boolean;\n}\n\nexport interface SimpleCellProps extends SimpleCellOwnProps, TappableProps {}\n\ntype SimpleCellTypographyProps = React.HTMLAttributes<HTMLDivElement> &\n  HasComponent;\n\nconst SimpleCellTypography: React.FC<SimpleCellTypographyProps> = (\n  props: SimpleCellTypographyProps\n) => {\n  const { sizeY } = useAdaptivity();\n  const platform = usePlatform();\n\n  if (sizeY === SizeType.COMPACT) {\n    return <Text Component=\"span\" weight=\"regular\" {...props} />;\n  } else if (platform === ANDROID) {\n    return <Headline Component=\"span\" weight=\"regular\" {...props} />;\n  } else {\n    return <Title Component=\"span\" level=\"3\" weight=\"3\" {...props} />;\n  }\n};\n\nconst SimpleCell: React.FC<SimpleCellProps> = ({\n  badge,\n  before,\n  indicator,\n  children,\n  after,\n  description,\n  expandable,\n  multiline,\n  sizeY,\n  ...restProps\n}: SimpleCellProps) => {\n  const platform = usePlatform();\n  const hasAfter = hasReactNode(after) || (expandable && platform === IOS);\n\n  return (\n    <Tappable\n      {...restProps}\n      vkuiClass={classNames(\n        getClassName(\"SimpleCell\", platform),\n        {\n          \"SimpleCell--exp\": expandable,\n          \"SimpleCell--mult\": multiline,\n        },\n        `SimpleCell--sizeY-${sizeY}`\n      )}\n    >\n      {before}\n      <div vkuiClass=\"SimpleCell__main\">\n        <div vkuiClass=\"SimpleCell__content\">\n          <SimpleCellTypography vkuiClass=\"SimpleCell__children\">\n            {children}\n          </SimpleCellTypography>\n          {hasReactNode(badge) && (\n            <span vkuiClass=\"SimpleCell__badge\">{badge}</span>\n          )}\n        </div>\n        {description && (\n          <Subhead Component=\"span\" vkuiClass=\"SimpleCell__description\">\n            {description}\n          </Subhead>\n        )}\n      </div>\n      {hasReactNode(indicator) && (\n        <SimpleCellTypography\n          Component=\"span\"\n          vkuiClass=\"SimpleCell__indicator\"\n        >\n          {indicator}\n        </SimpleCellTypography>\n      )}\n      {hasAfter && (\n        <div vkuiClass=\"SimpleCell__after\">\n          {after}\n          {expandable && platform === IOS && <Icon24Chevron />}\n        </div>\n      )}\n    </Tappable>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default withAdaptivity(SimpleCell, { sizeY: true });\n"]},"metadata":{},"sourceType":"module"}