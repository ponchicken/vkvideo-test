{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nexport var useDraggable = function useDraggable(_ref) {\n  var onDragFinish = _ref.onDragFinish;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dragging = _React$useState2[0],\n      setDragging = _React$useState2[1];\n\n  var rootElRef = React.useRef(null);\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      siblings = _React$useState4[0],\n      setSiblings = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dragStartIndex = _React$useState6[0],\n      setDragStartIndex = _React$useState6[1];\n\n  var _React$useState7 = React.useState(0),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      dragEndIndex = _React$useState8[0],\n      setDragEndIndex = _React$useState8[1];\n\n  var _React$useState9 = React.useState(0),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      dragShift = _React$useState10[0],\n      setDragShift = _React$useState10[1];\n\n  var _React$useState11 = React.useState(undefined),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      dragDirection = _React$useState12[0],\n      setDragDirection = _React$useState12[1];\n\n  var onDragStart = function onDragStart() {\n    var _rootEl$parentElement;\n\n    var rootEl = rootElRef.current;\n\n    if (!rootEl) {\n      return;\n    }\n\n    setDragging(true);\n    var _siblings = [];\n\n    if ((_rootEl$parentElement = rootEl.parentElement) !== null && _rootEl$parentElement !== void 0 && _rootEl$parentElement.childNodes) {\n      _siblings = Array.from(rootEl.parentElement.children);\n    }\n\n    var idx = _siblings.indexOf(rootEl);\n\n    setDragStartIndex(idx);\n    setDragEndIndex(idx);\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  var onDragMove = function onDragMove(e) {\n    e.originalEvent.preventDefault();\n    var rootEl = rootElRef.current;\n\n    if (rootEl) {\n      rootEl.style.transform = \"translateY(\".concat(e.shiftY, \"px)\");\n      var rootGesture = rootEl.getBoundingClientRect();\n      setDragDirection(dragShift - e.shiftY < 0 ? \"down\" : \"up\");\n      setDragShift(e.shiftY);\n      setDragEndIndex(dragStartIndex);\n      siblings.forEach(function (sibling, siblingIndex) {\n        var siblingGesture = sibling.getBoundingClientRect();\n        var siblingHalfHeight = siblingGesture.height / 2;\n        var rootOverSibling = rootGesture.bottom > siblingGesture.top + siblingHalfHeight;\n        var rootUnderSibling = rootGesture.top < siblingGesture.bottom - siblingHalfHeight;\n\n        if (dragStartIndex < siblingIndex) {\n          if (rootOverSibling) {\n            if (dragDirection === \"down\") {\n              sibling.style.transform = \"translateY(-100%)\";\n            }\n\n            setDragEndIndex(function (dragEndIndex) {\n              return dragEndIndex + 1;\n            });\n          }\n\n          if (rootUnderSibling && dragDirection === \"up\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        } else if (dragStartIndex > siblingIndex) {\n          if (rootUnderSibling) {\n            if (dragDirection === \"up\") {\n              sibling.style.transform = \"translateY(100%)\";\n            }\n\n            setDragEndIndex(function (dragEndIndex) {\n              return dragEndIndex - 1;\n            });\n          }\n\n          if (rootOverSibling && dragDirection === \"down\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        }\n      });\n    }\n  };\n\n  var onDragEnd = function onDragEnd() {\n    var from = dragStartIndex,\n        to = dragEndIndex;\n    siblings.forEach(function (sibling) {\n      sibling.style.transform = \"\";\n    });\n    setSiblings([]);\n    setDragEndIndex(0);\n    setDragStartIndex(0);\n    setDragDirection(undefined);\n    setDragShift(0);\n    setDragging(false);\n    onDragFinish && onDragFinish({\n      from: from,\n      to: to\n    });\n  };\n\n  var useDraggableProps = {\n    onDragStart: onDragStart,\n    onDragMove: onDragMove,\n    onDragEnd: onDragEnd,\n    dragging: dragging,\n    rootElRef: rootElRef\n  };\n  return useDraggableProps;\n};","map":{"version":3,"mappings":"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","names":["React","useDraggable","onDragFinish","useState","dragging","setDragging","rootElRef","useRef","siblings","setSiblings","dragStartIndex","setDragStartIndex","dragEndIndex","setDragEndIndex","dragShift","setDragShift","undefined","dragDirection","setDragDirection","onDragStart","rootEl","current","_siblings","parentElement","_rootEl$parentElement","childNodes","Array","from","children","idx","indexOf","onDragMove","e","originalEvent","preventDefault","style","transform","shiftY","rootGesture","getBoundingClientRect","forEach","sibling","siblingIndex","siblingGesture","siblingHalfHeight","height","rootOverSibling","bottom","top","rootUnderSibling","onDragEnd","to","useDraggableProps"],"sources":["/Users/al.balandin/code/vkvideo-test/node_modules/@vkontakte/vkui/src/components/Cell/useDraggable.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { TouchEvent } from \"../Touch/Touch\";\nimport { CellProps } from \"./Cell\";\n\nexport interface DraggableProps {\n  onDragStart: () => void;\n  onDragEnd: () => void;\n  onDragMove: (e: TouchEvent) => void;\n}\n\ninterface UseDraggableProps extends DraggableProps {\n  dragging: boolean;\n  rootElRef: any;\n}\n\nexport const useDraggable = ({\n  onDragFinish,\n}: Pick<CellProps, \"onDragFinish\">) => {\n  const [dragging, setDragging] = React.useState<boolean>(false);\n  const rootElRef = React.useRef<HTMLElement>(null);\n\n  const [siblings, setSiblings] = React.useState<HTMLElement[]>([]);\n  const [dragStartIndex, setDragStartIndex] = React.useState<number>(0);\n  const [dragEndIndex, setDragEndIndex] = React.useState<number>(0);\n  const [dragShift, setDragShift] = React.useState<number>(0);\n  const [dragDirection, setDragDirection] = React.useState<\n    \"down\" | \"up\" | undefined\n  >(undefined);\n\n  const onDragStart = () => {\n    const rootEl = rootElRef.current;\n    if (!rootEl) {\n      return;\n    }\n\n    setDragging(true);\n\n    let _siblings: HTMLElement[] = [];\n    if (rootEl.parentElement?.childNodes) {\n      _siblings = Array.from(rootEl.parentElement.children) as HTMLElement[];\n    }\n    const idx = _siblings.indexOf(rootEl);\n\n    setDragStartIndex(idx);\n    setDragEndIndex(idx);\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  const onDragMove = (e: TouchEvent) => {\n    e.originalEvent.preventDefault();\n\n    const rootEl = rootElRef.current;\n\n    if (rootEl) {\n      rootEl.style.transform = `translateY(${e.shiftY}px)`;\n      const rootGesture = rootEl.getBoundingClientRect();\n\n      setDragDirection(dragShift - e.shiftY < 0 ? \"down\" : \"up\");\n      setDragShift(e.shiftY);\n      setDragEndIndex(dragStartIndex);\n\n      siblings.forEach((sibling: HTMLElement, siblingIndex: number) => {\n        const siblingGesture = sibling.getBoundingClientRect();\n        const siblingHalfHeight = siblingGesture.height / 2;\n\n        const rootOverSibling =\n          rootGesture.bottom > siblingGesture.top + siblingHalfHeight;\n        const rootUnderSibling =\n          rootGesture.top < siblingGesture.bottom - siblingHalfHeight;\n\n        if (dragStartIndex < siblingIndex) {\n          if (rootOverSibling) {\n            if (dragDirection === \"down\") {\n              sibling.style.transform = \"translateY(-100%)\";\n            }\n\n            setDragEndIndex((dragEndIndex) => dragEndIndex + 1);\n          }\n          if (rootUnderSibling && dragDirection === \"up\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        } else if (dragStartIndex > siblingIndex) {\n          if (rootUnderSibling) {\n            if (dragDirection === \"up\") {\n              sibling.style.transform = \"translateY(100%)\";\n            }\n\n            setDragEndIndex((dragEndIndex) => dragEndIndex - 1);\n          }\n          if (rootOverSibling && dragDirection === \"down\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        }\n      });\n    }\n  };\n\n  const onDragEnd = () => {\n    const [from, to] = [dragStartIndex, dragEndIndex];\n\n    siblings.forEach((sibling: HTMLElement) => {\n      sibling.style.transform = \"\";\n    });\n\n    setSiblings([]);\n    setDragEndIndex(0);\n    setDragStartIndex(0);\n    setDragDirection(undefined);\n    setDragShift(0);\n\n    setDragging(false);\n\n    onDragFinish && onDragFinish({ from, to });\n  };\n\n  const useDraggableProps: UseDraggableProps = {\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n    dragging,\n    rootElRef,\n  };\n\n  return useDraggableProps;\n};\n"]},"metadata":{},"sourceType":"module"}