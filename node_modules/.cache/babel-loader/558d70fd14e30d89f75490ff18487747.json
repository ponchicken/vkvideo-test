{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"value\", \"label\"],\n    _excluded2 = [\"style\", \"value\", \"onChange\", \"onInputChange\", \"onKeyDown\", \"onBlur\", \"onFocus\", \"children\", \"className\", \"inputValue\", \"getRef\", \"getRootRef\", \"placeholder\", \"getOptionValue\", \"getOptionLabel\", \"getNewOptionData\", \"renderChip\", \"after\", \"inputAriaLabel\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { FormField } from \"../FormField/FormField\";\nimport { classNames } from \"../../lib/classNames\";\nimport { Chip } from \"../Chip/Chip\";\nimport { noop } from \"../../lib/utils\";\nimport { useChipsInput } from \"./useChipsInput\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { prefixClass } from \"../../lib/prefixClass\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nexport var chipsInputDefaultProps = {\n  type: \"text\",\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: \"\",\n  inputAriaLabel: \"Введите ваше значение...\",\n  getOptionValue: function getOptionValue(option) {\n    return option.value;\n  },\n  getOptionLabel: function getOptionLabel(option) {\n    return option.label;\n  },\n  getNewOptionData: function getNewOptionData(_, label) {\n    return {\n      value: label,\n      label: label\n    };\n  },\n  renderChip: function renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    var disabled = props.disabled,\n        value = props.value,\n        label = props.label,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    return createScopedElement(Chip, _extends({\n      value: value,\n      removable: !disabled\n    }, rest), label);\n  }\n};\n\nvar ChipsInput = function ChipsInput(props) {\n  var propsWithDefault = _objectSpread(_objectSpread({}, chipsInputDefaultProps), props);\n\n  var style = propsWithDefault.style,\n      value = propsWithDefault.value,\n      onChange = propsWithDefault.onChange,\n      onInputChange = propsWithDefault.onInputChange,\n      onKeyDown = propsWithDefault.onKeyDown,\n      onBlur = propsWithDefault.onBlur,\n      onFocus = propsWithDefault.onFocus,\n      children = propsWithDefault.children,\n      className = propsWithDefault.className,\n      inputValue = propsWithDefault.inputValue,\n      getRef = propsWithDefault.getRef,\n      getRootRef = propsWithDefault.getRootRef,\n      placeholder = propsWithDefault.placeholder,\n      getOptionValue = propsWithDefault.getOptionValue,\n      getOptionLabel = propsWithDefault.getOptionLabel,\n      getNewOptionData = propsWithDefault.getNewOptionData,\n      renderChip = propsWithDefault.renderChip,\n      after = propsWithDefault.after,\n      inputAriaLabel = propsWithDefault.inputAriaLabel,\n      restProps = _objectWithoutProperties(propsWithDefault, _excluded2);\n\n  var _useAdaptivity = useAdaptivity(),\n      sizeY = _useAdaptivity.sizeY;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _useChipsInput = useChipsInput(propsWithDefault),\n      fieldValue = _useChipsInput.fieldValue,\n      addOptionFromInput = _useChipsInput.addOptionFromInput,\n      removeOption = _useChipsInput.removeOption,\n      selectedOptions = _useChipsInput.selectedOptions,\n      handleInputChange = _useChipsInput.handleInputChange;\n\n  var inputRef = useExternRef(getRef);\n  var isDisabled = restProps.disabled || restProps.readOnly;\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === \"Backspace\" && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === \"Enter\" && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  var handleBlur = function handleBlur(e) {\n    if (focused) {\n      setFocused(false);\n    }\n\n    onBlur(e);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    if (!focused) {\n      setFocused(true);\n    }\n\n    onFocus(e);\n  };\n\n  var handleChipRemove = function handleChipRemove(_, value) {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  var handleClick = function handleClick(e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if ((inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return createScopedElement(FormField, {\n    getRootRef: getRootRef,\n    vkuiClass: classNames(\"ChipsInput\", \"ChipsInput--sizeY-\".concat(sizeY), {\n      \"ChipsInput--focused\": focused,\n      \"ChipsInput--withChips\": !!selectedOptions.length\n    }),\n    className: className,\n    style: style,\n    disabled: restProps.disabled,\n    after: after,\n    onClick: handleClick,\n    role: \"application\",\n    \"aria-disabled\": restProps.disabled,\n    \"aria-readonly\": restProps.readOnly\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"ChipsInput__container\",\n    role: \"presentation\"\n  }, selectedOptions.map(function (option) {\n    var value = getOptionValue(option);\n    var label = getOptionLabel(option);\n    return createScopedElement(React.Fragment, {\n      key: \"\".concat(_typeof(value), \"-\").concat(value)\n    }, renderChip({\n      option: option,\n      value: value,\n      label: label,\n      onRemove: handleChipRemove,\n      disabled: Boolean(restProps.disabled),\n      className: prefixClass(\"ChipsInput__chip\")\n    }));\n  }), createScopedElement(\"label\", {\n    vkuiClass: \"ChipsInput__input-container\",\n    \"aria-label\": inputAriaLabel\n  }, createScopedElement(\"input\", _extends({\n    ref: inputRef,\n    value: fieldValue,\n    autoCapitalize: \"none\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: false,\n    \"aria-autocomplete\": \"list\",\n    vkuiClass: \"ChipsInput__el\",\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    placeholder: selectedOptions.length ? undefined : placeholder\n  }, restProps)))));\n}; // eslint-disable-next-line import/no-default-export\n\n\nexport default ChipsInput;","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,SAAT;AACA,SAASC,UAAT;AACA,SAASC,IAAT;AACA,SAASC,IAAT;AACA,SAASC,aAAT;AACA,SAASC,aAAT;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AAqCA,OAAO,IAAMC,sBAA4C,GAAG;EAC1DC,IAAI,EAAE,MADoD;EAE1DC,QAAQ,EAAEP,IAFgD;EAG1DQ,aAAa,EAAER,IAH2C;EAI1DS,SAAS,EAAET,IAJ+C;EAK1DU,MAAM,EAAEV,IALkD;EAM1DW,OAAO,EAAEX,IANiD;EAO1DY,KAAK,EAAE,EAPmD;EAQ1DC,UAAU,EAAE,EAR8C;EAS1DC,cAAc,EAAE,0BAT0C;EAU1DC,cAAc,EAAE,wBAACC,MAAD;IAAA,OAAYA,MAAM,CAACJ,KAAnB;EAV0C;EAW1DK,cAAc,EAAE,wBAACD,MAAD;IAAA,OAAYA,MAAM,CAACE,KAAnB;EAX0C;EAY1DC,gBAAgB,EAAE,0BAACC,CAAD,EAAIF,KAAJ;IAAA,OAAe;MAC/BN,KAAK,EAAEM,KADwB;MAE/BA,KAAK,EAALA;IAF+B,CAAf;EAZwC;EAgB1DG,UAhB0D,sBAgB/CC,KAhB+C,EAgBxC;IAChB,IAAI,CAACA,KAAL,EAAY;MACV,OAAO,IAAP;IACD;;IAED,IAAQC,QAAR,GAA4CD,KAA5C,CAAQC,QAAR;IAAA,IAAkBX,KAAlB,GAA4CU,KAA5C,CAAkBV,KAAlB;IAAA,IAAyBM,KAAzB,GAA4CI,KAA5C,CAAyBJ,KAAzB;IAAA,IAAmCM,IAAnC,4BAA4CF,KAA5C;;IACA,OACEG,oBAAC1B,IAAD;MAAMa,KAAK,EAAEA,KAAb;MAAoBc,SAAS,EAAE,CAACH;IAAhC,GAA8CC,IAA9C,GACGN,KADH,CADF;EAKD;AA3ByD,CAArD;;AA8BP,IAAMS,UAAU,GAAG,SAAbA,UAAa,CACjBL,KADiB,EAEd;EACH,IAAMM,gBAAgB,mCAAQvB,sBAAR,GAAmCiB,KAAnC,CAAtB;;EACA,IACEO,KADF,GAqBID,gBArBJ,CACEC,KADF;EAAA,IAEEjB,KAFF,GAqBIgB,gBArBJ,CAEEhB,KAFF;EAAA,IAGEL,QAHF,GAqBIqB,gBArBJ,CAGErB,QAHF;EAAA,IAIEC,aAJF,GAqBIoB,gBArBJ,CAIEpB,aAJF;EAAA,IAKEC,SALF,GAqBImB,gBArBJ,CAKEnB,SALF;EAAA,IAMEC,MANF,GAqBIkB,gBArBJ,CAMElB,MANF;EAAA,IAOEC,OAPF,GAqBIiB,gBArBJ,CAOEjB,OAPF;EAAA,IAQEmB,QARF,GAqBIF,gBArBJ,CAQEE,QARF;EAAA,IASEC,SATF,GAqBIH,gBArBJ,CASEG,SATF;EAAA,IAUElB,UAVF,GAqBIe,gBArBJ,CAUEf,UAVF;EAAA,IAWEmB,MAXF,GAqBIJ,gBArBJ,CAWEI,MAXF;EAAA,IAYEC,UAZF,GAqBIL,gBArBJ,CAYEK,UAZF;EAAA,IAaEC,WAbF,GAqBIN,gBArBJ,CAaEM,WAbF;EAAA,IAcEnB,cAdF,GAqBIa,gBArBJ,CAcEb,cAdF;EAAA,IAeEE,cAfF,GAqBIW,gBArBJ,CAeEX,cAfF;EAAA,IAgBEE,gBAhBF,GAqBIS,gBArBJ,CAgBET,gBAhBF;EAAA,IAiBEE,UAjBF,GAqBIO,gBArBJ,CAiBEP,UAjBF;EAAA,IAkBEc,KAlBF,GAqBIP,gBArBJ,CAkBEO,KAlBF;EAAA,IAmBErB,cAnBF,GAqBIc,gBArBJ,CAmBEd,cAnBF;EAAA,IAoBKsB,SApBL,4BAqBIR,gBArBJ;;EAsBA,qBAAkB1B,aAAa,EAA/B;EAAA,IAAQmC,KAAR,kBAAQA,KAAR;;EAEA,sBAA8BzC,KAAK,CAAC0C,QAAN1C,CAAe,KAAfA,CAA9B;EAAA;EAAA,IAAO2C,OAAP;EAAA,IAAgBC,UAAhB;;EACA,qBAMIvC,aAAa,CAAC2B,gBAAD,CANjB;EAAA,IACEa,UADF,kBACEA,UADF;EAAA,IAEEC,kBAFF,kBAEEA,kBAFF;EAAA,IAGEC,YAHF,kBAGEA,YAHF;EAAA,IAIEC,eAJF,kBAIEA,eAJF;EAAA,IAKEC,iBALF,kBAKEA,iBALF;;EAOA,IAAMC,QAAQ,GAAG1C,YAAY,CAAC4B,MAAD,CAA7B;EAEA,IAAMe,UAAU,GAAGX,SAAS,CAACb,QAAVa,IAAsBA,SAAS,CAACY,QAAnD;;EAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD,EAA8C;IAClE,IAAIH,UAAJ,EAAgB;MACdG,CAAC,CAACC,cAAFD;MACA;IACD;;IAEDzC,SAAS,CAAEyC,CAAF,CAATzC;;IAEA,IACEyC,CAAC,CAACE,GAAFF,KAAU,WAAVA,IACA,CAACA,CAAC,CAACG,gBADHH,IAEA,CAACT,UAFDS,IAGAN,eAAe,CAACU,MAJlB,EAKE;MACAX,YAAY,CACV5B,cAAc,CAAE6B,eAAe,CAACA,eAAe,CAACU,MAAhBV,GAAyB,CAA1B,CAAjB,CADJ,CAAZD;MAGAO,CAAC,CAACC,cAAFD;IACD;;IAED,IAAIA,CAAC,CAACE,GAAFF,KAAU,OAAVA,IAAqB,CAACA,CAAC,CAACG,gBAAxBH,IAA4CT,UAAhD,EAA4D;MAC1DC,kBAAkB;MAClBQ,CAAC,CAACC,cAAFD;IACD;EAvBH;;EA0BA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACL,CAAD,EAA2C;IAC5D,IAAIX,OAAJ,EAAa;MACXC,UAAU,CAAC,KAAD,CAAVA;IACD;;IACD9B,MAAM,CAAEwC,CAAF,CAANxC;EAJF;;EAOA,IAAM8C,WAAW,GAAG,SAAdA,WAAc,CAACN,CAAD,EAA2C;IAC7D,IAAI,CAACX,OAAL,EAAc;MACZC,UAAU,CAAC,IAAD,CAAVA;IACD;;IACD7B,OAAO,CAAEuC,CAAF,CAAPvC;EAJF;;EAOA,IAAM8C,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBrC,CADuB,EAEvBR,KAFuB,EAGpB;IACH,IAAIA,KAAK,KAAK8C,SAAd,EAAyB;MACvBf,YAAY,CAAC/B,KAAD,CAAZ+B;IACD;EANH;;EASA,IAAMgB,WAAW,GAAG,SAAdA,WAAc,CAACT,CAAD,EAAyC;IAC3D,IAAIH,UAAJ,EAAgB;MACdG,CAAC,CAACC,cAAFD;MACA;IACD;;IAED,IAAI,SAAQ,SAARJ,YAAQ,WAARA,oBAAQ,CAAEc,OAAV,MAAsB,IAAtB,IAA8B,CAACrB,OAAnC,EAA4C;MAC1CO,QAAQ,CAACc,OAATd,CAAiBe,KAAjBf;IACD;EARH;;EAWA,OACErB,oBAAC5B,SAAD;IACEoC,UAAU,EAAEA,UADd;IAEE6B,SAAS,EAAEhE,UAAU,CAAC,YAAD,8BAAoCuC,KAApC,GAA6C;MAChE,uBAAuBE,OADyC;MAEhE,yBAAyB,CAAC,CAACK,eAAe,CAACU;IAFqB,CAA7C,CAFvB;IAMEvB,SAAS,EAAEA,SANb;IAOEF,KAAK,EAAEA,KAPT;IAQEN,QAAQ,EAAEa,SAAS,CAACb,QARtB;IASEY,KAAK,EAAEA,KATT;IAUE4B,OAAO,EAAEJ,WAVX;IAWEK,IAAI,EAAC,aAXP;IAYE,iBAAe5B,SAAS,CAACb,QAZ3B;IAaE,iBAAea,SAAS,CAACY;EAb3B,GAeEvB;IAAKqC,SAAS,EAAC,uBAAf;IAAuCE,IAAI,EAAC;EAA5C,GACGpB,eAAe,CAACqB,GAAhBrB,CAAoB,UAAC5B,MAAD,EAAoB;IACvC,IAAMJ,KAAK,GAAGG,cAAc,CAAEC,MAAF,CAA5B;IACA,IAAME,KAAK,GAAGD,cAAc,CAAED,MAAF,CAA5B;IAEA,OACES,oBAAC7B,KAAD,CAAOsE,QAAP;MAAgBd,GAAG,oBAAYxC,KAAZ,eAAqBA,KAArB;IAAnB,GACGS,UAAU,CAAE;MACXL,MAAM,EAANA,MADW;MAEXJ,KAAK,EAALA,KAFW;MAGXM,KAAK,EAALA,KAHW;MAIXiD,QAAQ,EAAEV,gBAJC;MAKXlC,QAAQ,EAAE6C,OAAO,CAAChC,SAAS,CAACb,QAAX,CALN;MAMXQ,SAAS,EAAE5B,WAAW,CAAC,kBAAD;IANX,CAAF,CADb,CADF;EAJD,EADH,EAkBEsB;IACEqC,SAAS,EAAC,6BADZ;IAEE,cAAYhD;EAFd,GAIEW;IACE4C,GAAG,EAAEvB,QADP;IAEElC,KAAK,EAAE6B,UAFT;IAGE6B,cAAc,EAAC,MAHjB;IAIEC,YAAY,EAAC,KAJf;IAKEC,WAAW,EAAC,KALd;IAMEC,UAAU,EAAE,KANd;IAOE,qBAAkB,MAPpB;IAQEX,SAAS,EAAC,gBARZ;IASEvD,QAAQ,EAAEsC,iBATZ;IAUEpC,SAAS,EAAEwC,aAVb;IAWEtC,OAAO,EAAE6C,WAXX;IAYE9C,MAAM,EAAE6C,UAZV;IAaErB,WAAW,EAAEU,eAAe,CAACU,MAAhBV,GAAyBc,SAAzBd,GAAqCV;EAbpD,GAcME,SAdN,EAJF,CAlBF,CAfF,CADF;AApGF,E,CAgKA;;;AACA,eAAeT,UAAf","names":["React","FormField","classNames","Chip","noop","useChipsInput","useAdaptivity","prefixClass","useExternRef","chipsInputDefaultProps","type","onChange","onInputChange","onKeyDown","onBlur","onFocus","value","inputValue","inputAriaLabel","getOptionValue","option","getOptionLabel","label","getNewOptionData","_","renderChip","props","disabled","rest","createScopedElement","removable","ChipsInput","propsWithDefault","style","children","className","getRef","getRootRef","placeholder","after","restProps","sizeY","useState","focused","setFocused","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","inputRef","isDisabled","readOnly","handleKeyDown","e","preventDefault","key","defaultPrevented","length","handleBlur","handleFocus","handleChipRemove","undefined","handleClick","current","focus","vkuiClass","onClick","role","map","Fragment","onRemove","Boolean","ref","autoCapitalize","autoComplete","autoCorrect","spellCheck"],"sources":["/Users/al.balandin/code/vkvideo-test/node_modules/@vkontakte/vkui/src/components/ChipsInput/ChipsInput.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { HasAlign, HasRef, HasRootRef } from \"../../types\";\nimport { FormField, FormFieldProps } from \"../FormField/FormField\";\nimport { classNames } from \"../../lib/classNames\";\nimport { Chip, ChipProps } from \"../Chip/Chip\";\nimport { noop } from \"../../lib/utils\";\nimport { useChipsInput } from \"./useChipsInput\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { prefixClass } from \"../../lib/prefixClass\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport \"./ChipsInput.css\";\n\nexport type ChipsInputValue = string | number;\n\nexport interface ChipsInputOption {\n  value?: ChipsInputValue;\n  label?: string;\n  [otherProp: string]: any;\n}\n\nexport interface RenderChip<Option extends ChipsInputOption> extends ChipProps {\n  label: string;\n  option: Option;\n  disabled: boolean;\n}\n\nexport interface ChipsInputProps<Option extends ChipsInputOption>\n  extends Omit<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"value\" | \"onChange\"\n    >,\n    HasRef<HTMLInputElement>,\n    HasRootRef<HTMLDivElement>,\n    HasAlign,\n    FormFieldProps {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipsInputValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipsInputValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => React.ReactNode;\n  inputAriaLabel?: string;\n}\n\nexport const chipsInputDefaultProps: ChipsInputProps<any> = {\n  type: \"text\",\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: \"\",\n  inputAriaLabel: \"Введите ваше значение...\",\n  getOptionValue: (option) => option.value,\n  getOptionLabel: (option) => option.label,\n  getNewOptionData: (_, label) => ({\n    value: label,\n    label,\n  }),\n  renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    const { disabled, value, label, ...rest } = props;\n    return (\n      <Chip value={value} removable={!disabled} {...rest}>\n        {label}\n      </Chip>\n    );\n  },\n};\n\nconst ChipsInput = <Option extends ChipsInputOption>(\n  props: ChipsInputProps<Option>\n) => {\n  const propsWithDefault = { ...chipsInputDefaultProps, ...props };\n  const {\n    style,\n    value,\n    onChange,\n    onInputChange,\n    onKeyDown,\n    onBlur,\n    onFocus,\n    children,\n    className,\n    inputValue,\n    getRef,\n    getRootRef,\n    placeholder,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n    renderChip,\n    after,\n    inputAriaLabel,\n    ...restProps\n  } = propsWithDefault;\n  const { sizeY } = useAdaptivity();\n\n  const [focused, setFocused] = React.useState(false);\n  const {\n    fieldValue,\n    addOptionFromInput,\n    removeOption,\n    selectedOptions,\n    handleInputChange,\n  } = useChipsInput(propsWithDefault);\n  const inputRef = useExternRef(getRef);\n\n  const isDisabled = restProps.disabled || restProps.readOnly;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown!(e);\n\n    if (\n      e.key === \"Backspace\" &&\n      !e.defaultPrevented &&\n      !fieldValue &&\n      selectedOptions.length\n    ) {\n      removeOption(\n        getOptionValue!(selectedOptions[selectedOptions.length - 1])\n      );\n      e.preventDefault();\n    }\n\n    if (e.key === \"Enter\" && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur!(e);\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus!(e);\n  };\n\n  const handleChipRemove = (\n    _: React.MouseEvent | undefined,\n    value: ChipsInputValue | undefined\n  ) => {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (inputRef?.current !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <FormField\n      getRootRef={getRootRef}\n      vkuiClass={classNames(\"ChipsInput\", `ChipsInput--sizeY-${sizeY}`, {\n        \"ChipsInput--focused\": focused,\n        \"ChipsInput--withChips\": !!selectedOptions.length,\n      })}\n      className={className}\n      style={style}\n      disabled={restProps.disabled}\n      after={after}\n      onClick={handleClick}\n      role=\"application\"\n      aria-disabled={restProps.disabled}\n      aria-readonly={restProps.readOnly}\n    >\n      <div vkuiClass=\"ChipsInput__container\" role=\"presentation\">\n        {selectedOptions.map((option: Option) => {\n          const value = getOptionValue!(option);\n          const label = getOptionLabel!(option);\n\n          return (\n            <React.Fragment key={`${typeof value}-${value}`}>\n              {renderChip!({\n                option,\n                value,\n                label,\n                onRemove: handleChipRemove,\n                disabled: Boolean(restProps.disabled),\n                className: prefixClass(\"ChipsInput__chip\"),\n              })}\n            </React.Fragment>\n          );\n        })}\n        <label\n          vkuiClass=\"ChipsInput__input-container\"\n          aria-label={inputAriaLabel}\n        >\n          <input\n            ref={inputRef}\n            value={fieldValue}\n            autoCapitalize=\"none\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            spellCheck={false}\n            aria-autocomplete=\"list\"\n            vkuiClass=\"ChipsInput__el\"\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            placeholder={selectedOptions.length ? undefined : placeholder}\n            {...restProps}\n          />\n        </label>\n      </div>\n    </FormField>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default ChipsInput;\n"]},"metadata":{},"sourceType":"module"}